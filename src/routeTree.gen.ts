/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as OerRouteImport } from './routes/oer'
import { Route as LikedRouteImport } from './routes/liked'
import { Route as AllCollectionsRouteImport } from './routes/all-collections'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MembersMemberIdRouteImport } from './routes/members.$memberId'
import { Route as CollectionsIdRouteImport } from './routes/collections.$id'
import { ServerRoute as ApiVersionServerRouteImport } from './routes/api/version'
import { ServerRoute as ApiStatusServerRouteImport } from './routes/api/status'

const rootServerRouteImport = createServerRootRoute()

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const OerRoute = OerRouteImport.update({
  id: '/oer',
  path: '/oer',
  getParentRoute: () => rootRouteImport,
} as any)
const LikedRoute = LikedRouteImport.update({
  id: '/liked',
  path: '/liked',
  getParentRoute: () => rootRouteImport,
} as any)
const AllCollectionsRoute = AllCollectionsRouteImport.update({
  id: '/all-collections',
  path: '/all-collections',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MembersMemberIdRoute = MembersMemberIdRouteImport.update({
  id: '/members/$memberId',
  path: '/members/$memberId',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsIdRoute = CollectionsIdRouteImport.update({
  id: '/collections/$id',
  path: '/collections/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiVersionServerRoute = ApiVersionServerRouteImport.update({
  id: '/api/version',
  path: '/api/version',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiStatusServerRoute = ApiStatusServerRouteImport.update({
  id: '/api/status',
  path: '/api/status',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/all-collections': typeof AllCollectionsRoute
  '/liked': typeof LikedRoute
  '/oer': typeof OerRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/members/$memberId': typeof MembersMemberIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/all-collections': typeof AllCollectionsRoute
  '/liked': typeof LikedRoute
  '/oer': typeof OerRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/members/$memberId': typeof MembersMemberIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/all-collections': typeof AllCollectionsRoute
  '/liked': typeof LikedRoute
  '/oer': typeof OerRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/members/$memberId': typeof MembersMemberIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/all-collections'
    | '/liked'
    | '/oer'
    | '/search'
    | '/collections/$id'
    | '/members/$memberId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/all-collections'
    | '/liked'
    | '/oer'
    | '/search'
    | '/collections/$id'
    | '/members/$memberId'
  id:
    | '__root__'
    | '/'
    | '/all-collections'
    | '/liked'
    | '/oer'
    | '/search'
    | '/collections/$id'
    | '/members/$memberId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AllCollectionsRoute: typeof AllCollectionsRoute
  LikedRoute: typeof LikedRoute
  OerRoute: typeof OerRoute
  SearchRoute: typeof SearchRoute
  CollectionsIdRoute: typeof CollectionsIdRoute
  MembersMemberIdRoute: typeof MembersMemberIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/status': typeof ApiStatusServerRoute
  '/api/version': typeof ApiVersionServerRoute
}
export interface FileServerRoutesByTo {
  '/api/status': typeof ApiStatusServerRoute
  '/api/version': typeof ApiVersionServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/status': typeof ApiStatusServerRoute
  '/api/version': typeof ApiVersionServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/status' | '/api/version'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/status' | '/api/version'
  id: '__root__' | '/api/status' | '/api/version'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiStatusServerRoute: typeof ApiStatusServerRoute
  ApiVersionServerRoute: typeof ApiVersionServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oer': {
      id: '/oer'
      path: '/oer'
      fullPath: '/oer'
      preLoaderRoute: typeof OerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/liked': {
      id: '/liked'
      path: '/liked'
      fullPath: '/liked'
      preLoaderRoute: typeof LikedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/all-collections': {
      id: '/all-collections'
      path: '/all-collections'
      fullPath: '/all-collections'
      preLoaderRoute: typeof AllCollectionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/members/$memberId': {
      id: '/members/$memberId'
      path: '/members/$memberId'
      fullPath: '/members/$memberId'
      preLoaderRoute: typeof MembersMemberIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections/$id': {
      id: '/collections/$id'
      path: '/collections/$id'
      fullPath: '/collections/$id'
      preLoaderRoute: typeof CollectionsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/version': {
      id: '/api/version'
      path: '/api/version'
      fullPath: '/api/version'
      preLoaderRoute: typeof ApiVersionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/status': {
      id: '/api/status'
      path: '/api/status'
      fullPath: '/api/status'
      preLoaderRoute: typeof ApiStatusServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AllCollectionsRoute: AllCollectionsRoute,
  LikedRoute: LikedRoute,
  OerRoute: OerRoute,
  SearchRoute: SearchRoute,
  CollectionsIdRoute: CollectionsIdRoute,
  MembersMemberIdRoute: MembersMemberIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiStatusServerRoute: ApiStatusServerRoute,
  ApiVersionServerRoute: ApiVersionServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()

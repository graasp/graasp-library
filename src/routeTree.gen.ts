/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as OerImport } from './routes/oer'
import { Route as LikedImport } from './routes/liked'
import { Route as AllCollectionsImport } from './routes/all-collections'
import { Route as IndexImport } from './routes/index'
import { Route as MembersMemberIdImport } from './routes/members.$memberId'
import { Route as CollectionsIdImport } from './routes/collections.$id'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const OerRoute = OerImport.update({
  id: '/oer',
  path: '/oer',
  getParentRoute: () => rootRoute,
} as any)

const LikedRoute = LikedImport.update({
  id: '/liked',
  path: '/liked',
  getParentRoute: () => rootRoute,
} as any)

const AllCollectionsRoute = AllCollectionsImport.update({
  id: '/all-collections',
  path: '/all-collections',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MembersMemberIdRoute = MembersMemberIdImport.update({
  id: '/members/$memberId',
  path: '/members/$memberId',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsIdRoute = CollectionsIdImport.update({
  id: '/collections/$id',
  path: '/collections/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/all-collections': {
      id: '/all-collections'
      path: '/all-collections'
      fullPath: '/all-collections'
      preLoaderRoute: typeof AllCollectionsImport
      parentRoute: typeof rootRoute
    }
    '/liked': {
      id: '/liked'
      path: '/liked'
      fullPath: '/liked'
      preLoaderRoute: typeof LikedImport
      parentRoute: typeof rootRoute
    }
    '/oer': {
      id: '/oer'
      path: '/oer'
      fullPath: '/oer'
      preLoaderRoute: typeof OerImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/collections/$id': {
      id: '/collections/$id'
      path: '/collections/$id'
      fullPath: '/collections/$id'
      preLoaderRoute: typeof CollectionsIdImport
      parentRoute: typeof rootRoute
    }
    '/members/$memberId': {
      id: '/members/$memberId'
      path: '/members/$memberId'
      fullPath: '/members/$memberId'
      preLoaderRoute: typeof MembersMemberIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/all-collections': typeof AllCollectionsRoute
  '/liked': typeof LikedRoute
  '/oer': typeof OerRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/members/$memberId': typeof MembersMemberIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/all-collections': typeof AllCollectionsRoute
  '/liked': typeof LikedRoute
  '/oer': typeof OerRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/members/$memberId': typeof MembersMemberIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/all-collections': typeof AllCollectionsRoute
  '/liked': typeof LikedRoute
  '/oer': typeof OerRoute
  '/search': typeof SearchRoute
  '/collections/$id': typeof CollectionsIdRoute
  '/members/$memberId': typeof MembersMemberIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/all-collections'
    | '/liked'
    | '/oer'
    | '/search'
    | '/collections/$id'
    | '/members/$memberId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/all-collections'
    | '/liked'
    | '/oer'
    | '/search'
    | '/collections/$id'
    | '/members/$memberId'
  id:
    | '__root__'
    | '/'
    | '/all-collections'
    | '/liked'
    | '/oer'
    | '/search'
    | '/collections/$id'
    | '/members/$memberId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AllCollectionsRoute: typeof AllCollectionsRoute
  LikedRoute: typeof LikedRoute
  OerRoute: typeof OerRoute
  SearchRoute: typeof SearchRoute
  CollectionsIdRoute: typeof CollectionsIdRoute
  MembersMemberIdRoute: typeof MembersMemberIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AllCollectionsRoute: AllCollectionsRoute,
  LikedRoute: LikedRoute,
  OerRoute: OerRoute,
  SearchRoute: SearchRoute,
  CollectionsIdRoute: CollectionsIdRoute,
  MembersMemberIdRoute: MembersMemberIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/all-collections",
        "/liked",
        "/oer",
        "/search",
        "/collections/$id",
        "/members/$memberId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/all-collections": {
      "filePath": "all-collections.tsx"
    },
    "/liked": {
      "filePath": "liked.tsx"
    },
    "/oer": {
      "filePath": "oer.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/collections/$id": {
      "filePath": "collections.$id.tsx"
    },
    "/members/$memberId": {
      "filePath": "members.$memberId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

// This file is auto-generated by @hey-api/openapi-ts
import type { Options } from '@hey-api/client-fetch';

import { client as _heyApiClient } from './client.gen';
import type {
  AuthenticateData,
  AuthenticateError,
  AuthenticateMobileData,
  AuthenticateMobileError,
  AuthenticateMobileResponse,
  AuthenticateMobileToWebData,
  AuthenticateMobileToWebError,
  ClearAllMentionsData,
  ClearAllMentionsError,
  ClearAllMentionsResponse,
  ClearChatMessageData,
  ClearChatMessageError,
  ClearChatMessageResponse,
  CollectionSearchData,
  CollectionSearchError,
  CollectionSearchResponse,
  CopyManyItemsData,
  CopyManyItemsError,
  CopyManyItemsResponse,
  CreateAppActionData,
  CreateAppActionError,
  CreateAppActionResponse,
  CreateAppData,
  CreateAppDataData,
  CreateAppDataError,
  CreateAppDataFileData,
  CreateAppDataFileError,
  CreateAppDataFileResponse,
  CreateAppDataResponse,
  CreateAppError,
  CreateAppResponse,
  CreateAppSettingData,
  CreateAppSettingError,
  CreateAppSettingFileData,
  CreateAppSettingFileError,
  CreateAppSettingFileResponse,
  CreateAppSettingResponse,
  CreateChatMessageData,
  CreateChatMessageError,
  CreateChatMessageResponse,
  CreateChatbotCompletionPromptData,
  CreateChatbotCompletionPromptError,
  CreateChatbotCompletionPromptResponse,
  CreateDocumentData,
  CreateDocumentError,
  CreateDocumentResponse,
  CreateEtherpadData,
  CreateEtherpadError,
  CreateEtherpadResponse,
  CreateFavoriteData,
  CreateFavoriteError,
  CreateFavoriteResponse,
  CreateFolderData,
  CreateFolderError,
  CreateFolderResponse,
  CreateFolderWithThumbnailData,
  CreateFolderWithThumbnailError,
  CreateFolderWithThumbnailResponse,
  CreateInvitationData,
  CreateInvitationError,
  CreateInvitationResponse,
  CreateItemData,
  CreateItemError,
  CreateItemFlagData,
  CreateItemFlagError,
  CreateItemFlagResponse,
  CreateItemLikeData,
  CreateItemLikeError,
  CreateItemLikeResponse,
  CreateItemMembershipData,
  CreateItemMembershipError,
  CreateItemMembershipResponse,
  CreateItemResponse,
  CreateItemWithThumbnailData,
  CreateItemWithThumbnailError,
  CreateItemWithThumbnailResponse,
  CreateLinkData,
  CreateLinkError,
  CreateLinkResponse,
  CreateManyItemMembershipsData,
  CreateManyItemMembershipsError,
  CreateManyItemMembershipsResponse,
  CreateOwnProfileData,
  CreateOwnProfileError,
  CreateOwnProfileResponse,
  CreateShortLinkData,
  CreateShortLinkError,
  CreateShortLinkResponse,
  CreateTagForItemData,
  CreateTagForItemError,
  CreateTagForItemResponse,
  CreateVisibilityData,
  CreateVisibilityError,
  CreateVisibilityResponse,
  DeleteAliasData,
  DeleteAliasError,
  DeleteAliasResponse,
  DeleteAppDataData,
  DeleteAppDataError,
  DeleteAppDataResponse,
  DeleteAppSettingData,
  DeleteAppSettingError,
  DeleteAppSettingResponse,
  DeleteChatMessageData,
  DeleteChatMessageError,
  DeleteChatMessageResponse,
  DeleteCurrentAccountData,
  DeleteCurrentAccountError,
  DeleteCurrentAccountResponse,
  DeleteFavoriteData,
  DeleteFavoriteError,
  DeleteFavoriteResponse,
  DeleteGeolocationData,
  DeleteGeolocationError,
  DeleteGeolocationResponse,
  DeleteInvitationData,
  DeleteInvitationError,
  DeleteInvitationResponse,
  DeleteItemLikeData,
  DeleteItemLikeError,
  DeleteItemLikeResponse,
  DeleteItemLoginSchemaData,
  DeleteItemLoginSchemaError,
  DeleteItemLoginSchemaResponse,
  DeleteItemMembershipData,
  DeleteItemMembershipError,
  DeleteItemMembershipResponse,
  DeleteItemsByIdThumbnailsData,
  DeleteItemsByItemIdMembershipsRequestsByMemberIdData,
  DeleteItemsByItemIdMembershipsRequestsByMemberIdResponse,
  DeleteManyItemsData,
  DeleteManyItemsError,
  DeleteManyItemsResponse,
  DeleteMembersMembersByIdDeleteData,
  DeleteMentionData,
  DeleteMentionError,
  DeleteMentionResponse,
  DeleteTagForItemData,
  DeleteTagForItemError,
  DeleteTagForItemResponse,
  DeleteVisibilityData,
  DeleteVisibilityError,
  DeleteVisibilityResponse,
  DownloadAppDataFileData,
  DownloadAppDataFileError,
  DownloadAppDataFileResponse,
  DownloadAppSettingFileData,
  DownloadAppSettingFileError,
  DownloadAppSettingFileResponse,
  DownloadAvatarData,
  DownloadAvatarError,
  DownloadAvatarResponse,
  DownloadFileData,
  DownloadFileError,
  DownloadFileResponse,
  DownloadItemThumbnailData,
  DownloadItemThumbnailError,
  DownloadItemThumbnailResponse,
  EnrollData,
  EnrollResponse,
  ExportActionsData,
  ExportActionsError,
  ExportActionsResponse,
  ExportMemberDataData,
  ExportMemberDataError,
  ExportMemberDataResponse,
  ExportZipData,
  ExportZipError,
  ExportZipResponse,
  GenerateAppTokenData,
  GenerateAppTokenError,
  GenerateAppTokenResponse,
  GeolocationReverseData,
  GeolocationReverseError,
  GeolocationReverseResponse,
  GeolocationSearchData,
  GeolocationSearchError,
  GeolocationSearchResponse,
  GetAccessibleItemsData,
  GetAccessibleItemsError,
  GetAccessibleItemsResponse,
  GetAggregateActionsData,
  GetAggregateActionsError,
  GetAggregateActionsResponse,
  GetAppActionsForAppData,
  GetAppActionsForAppError,
  GetAppActionsForAppResponse,
  GetAppContextData,
  GetAppContextResponse,
  GetAppDataForAppData,
  GetAppDataForAppError,
  GetAppDataForAppResponse,
  GetAppListData,
  GetAppListError,
  GetAppListResponse,
  GetAppSettingsForAppData,
  GetAppSettingsForAppError,
  GetAppSettingsForAppResponse,
  GetChatData,
  GetChatError,
  GetChatResponse,
  GetChildrenData,
  GetChildrenError,
  GetChildrenResponse,
  GetCollectionInformationsData,
  GetCollectionInformationsError,
  GetCollectionInformationsResponse,
  GetCollectionsForMemberData,
  GetCollectionsForMemberError,
  GetCollectionsForMemberResponse,
  GetCountForTagsData,
  GetCountForTagsError,
  GetCountForTagsResponse,
  GetCurrentAccountData,
  GetCurrentAccountError,
  GetCurrentAccountResponse,
  GetDescendantItemsData,
  GetDescendantItemsError,
  GetDescendantItemsResponse,
  GetEtherpadFromItemData,
  GetEtherpadFromItemError,
  GetEtherpadFromItemResponse,
  GetFacetsForNameData,
  GetFacetsForNameError,
  GetFacetsForNameResponse,
  GetFlagTypesData,
  GetFlagTypesError,
  GetFlagTypesResponse,
  GetGeolocationByItemData,
  GetGeolocationByItemError,
  GetGeolocationByItemResponse,
  GetInvitationByIdData,
  GetInvitationByIdError,
  GetInvitationByIdResponse,
  GetInvitationForItemData,
  GetInvitationForItemError,
  GetInvitationForItemResponse,
  GetItemActionsData,
  GetItemActionsError,
  GetItemActionsResponse,
  GetItemData,
  GetItemError,
  GetItemLoginSchemaData,
  GetItemLoginSchemaError,
  GetItemLoginSchemaResponse,
  GetItemLoginSchemaTypeData,
  GetItemLoginSchemaTypeError,
  GetItemLoginSchemaTypeResponse,
  GetItemMembershipsData,
  GetItemMembershipsError,
  GetItemMembershipsResponse,
  GetItemResponse,
  GetItemValidationGroupData,
  GetItemValidationGroupError,
  GetItemValidationGroupResponse,
  GetItemsByItemIdMembershipsRequestsData,
  GetItemsByItemIdMembershipsRequestsOwnData,
  GetItemsByItemIdMembershipsRequestsOwnResponse,
  GetItemsByItemIdMembershipsRequestsResponse,
  GetItemsCollectionsInformationsData,
  GetItemsCollectionsInformationsResponse,
  GetItemsCollectionsSearchRebuildData,
  GetItemsH5pAssetsIntegrationHtmlData,
  GetItemsInBoxData,
  GetItemsInBoxError,
  GetItemsInBoxResponse,
  GetItemsOwnData,
  GetItemsOwnError,
  GetItemsOwnResponse,
  GetItemsPublicationByItemIdStatusData,
  GetItemsSharedWithData,
  GetItemsSharedWithError,
  GetItemsSharedWithResponse,
  GetLatestItemValidationGroupData,
  GetLatestItemValidationGroupError,
  GetLatestItemValidationGroupResponse,
  GetLikesForCurrentMemberData,
  GetLikesForCurrentMemberError,
  GetLikesForCurrentMemberResponse,
  GetLikesForItemData,
  GetLikesForItemError,
  GetLikesForItemResponse,
  GetLinkMetadataData,
  GetLinkMetadataError,
  GetLinkMetadataResponse,
  GetLogoutData,
  GetMAuthRefreshData,
  GetManyItemsData,
  GetManyItemsError,
  GetManyItemsResponse,
  GetMemberProfileData,
  GetMemberProfileError,
  GetMemberProfileResponse,
  GetMembersActionsData,
  GetMembersCurrentPasswordStatusData,
  GetMembersCurrentPasswordStatusResponse,
  GetMostLikedCollectionsData,
  GetMostLikedCollectionsError,
  GetMostLikedCollectionsResponse,
  GetMostRecentCollectionsData,
  GetMostRecentCollectionsError,
  GetMostRecentCollectionsResponse,
  GetOneMemberData,
  GetOneMemberError,
  GetOneMemberResponse,
  GetOwnFavoriteData,
  GetOwnFavoriteError,
  GetOwnFavoriteResponse,
  GetOwnMentionsData,
  GetOwnMentionsError,
  GetOwnMentionsResponse,
  GetOwnMostUsedAppsData,
  GetOwnMostUsedAppsError,
  GetOwnMostUsedAppsResponse,
  GetOwnProfileData,
  GetOwnProfileError,
  GetOwnProfileResponse,
  GetOwnRecycledItemsData,
  GetOwnRecycledItemsError,
  GetOwnRecycledItemsResponse,
  GetParentItemsData,
  GetParentItemsError,
  GetParentItemsResponse,
  GetShortLinkAvailabilityData,
  GetShortLinkAvailabilityError,
  GetShortLinkAvailabilityResponse,
  GetShortLinkRedirectionData,
  GetShortLinkRedirectionError,
  GetShortLinksForItemData,
  GetShortLinksForItemError,
  GetShortLinksForItemResponse,
  GetStatusData,
  GetStorageData,
  GetStorageError,
  GetStorageFilesData,
  GetStorageFilesError,
  GetStorageFilesResponse,
  GetStorageResponse,
  GetTagsForItemData,
  GetTagsForItemError,
  GetTagsForItemResponse,
  GetWsData,
  HealthData,
  HealthResponse,
  ImportH5pData,
  ImportH5pError,
  ImportH5pResponse,
  ImportZipData,
  ImportZipError,
  InviteFromCsvData,
  InviteFromCsvError,
  InviteFromCsvResponse,
  InviteFromCsvWithTemplateData,
  InviteFromCsvWithTemplateError,
  InviteFromCsvWithTemplateResponse,
  LoginData,
  LoginError,
  LoginMobileData,
  LoginMobileError,
  LoginMobileResponse,
  LoginOrRegisterAsGuestData,
  LoginOrRegisterAsGuestError,
  LoginOrRegisterAsGuestResponse,
  LoginResponse,
  LoginWithPasswordMobileData,
  LoginWithPasswordMobileError,
  LoginWithPasswordMobileResponse,
  MoveManyItemsData,
  MoveManyItemsError,
  MoveManyItemsResponse,
  PatchChangeEmailData,
  PatchChangeEmailError,
  PatchChangeEmailResponse,
  PatchChatMessageData,
  PatchChatMessageError,
  PatchChatMessageResponse,
  PatchMembersByIdData,
  PatchMembersByIdError,
  PatchMembersByIdResponse,
  PatchMentionData,
  PatchMentionError,
  PatchMentionResponse,
  PatchPasswordData,
  PatchPasswordError,
  PatchPasswordResetData,
  PatchPasswordResetError,
  PatchPasswordResetResponse,
  PatchPasswordResponse,
  PostActionData,
  PostActionError,
  PostActionResponse,
  PostChangeEmailData,
  PostChangeEmailError,
  PostChangeEmailResponse,
  PostItemsByIdThumbnailsData,
  PostItemsByItemIdMembershipsRequestsData,
  PostItemsByItemIdMembershipsRequestsResponse,
  PostLoginPasswordData,
  PostMembersAvatarData,
  PostMembersAvatarResponse,
  PostPasswordData,
  PostPasswordError,
  PostPasswordResetData,
  PostPasswordResetError,
  PostPasswordResetResponse,
  PostPasswordResponse,
  PublishItemData,
  PublishItemError,
  PublishItemResponse,
  PutGeolocationData,
  PutGeolocationError,
  PutGeolocationResponse,
  RecycleManyItemsData,
  RecycleManyItemsError,
  RecycleManyItemsResponse,
  RegisterData,
  RegisterError,
  RegisterMobileData,
  RegisterMobileError,
  RegisterMobileResponse,
  RegisterResponse,
  ReorderItemData,
  ReorderItemError,
  ReorderItemResponse,
  RestoreManyItemsData,
  RestoreManyItemsError,
  RestoreManyItemsResponse,
  SendInvitationData,
  SendInvitationError,
  SendInvitationResponse,
  UnpublishItemData,
  UnpublishItemError,
  UnpublishItemResponse,
  UpdateAppData,
  UpdateAppDataData,
  UpdateAppDataError,
  UpdateAppDataResponse,
  UpdateAppError,
  UpdateAppResponse,
  UpdateAppSettingData,
  UpdateAppSettingError,
  UpdateAppSettingResponse,
  UpdateCurrentAccountData,
  UpdateCurrentAccountError,
  UpdateCurrentAccountResponse,
  UpdateDocumentData,
  UpdateDocumentError,
  UpdateDocumentResponse,
  UpdateEtherpadData,
  UpdateEtherpadError,
  UpdateEtherpadResponse,
  UpdateFolderData,
  UpdateFolderError,
  UpdateFolderResponse,
  UpdateInvitationData,
  UpdateInvitationError,
  UpdateInvitationResponse,
  UpdateItemData,
  UpdateItemError,
  UpdateItemLoginSchemaData,
  UpdateItemLoginSchemaError,
  UpdateItemLoginSchemaResponse,
  UpdateItemMembershipData,
  UpdateItemMembershipError,
  UpdateItemMembershipResponse,
  UpdateItemResponse,
  UpdateLinkData,
  UpdateLinkError,
  UpdateLinkResponse,
  UpdateOwnProfileData,
  UpdateOwnProfileError,
  UpdateOwnProfileResponse,
  UpdateShortLinkData,
  UpdateShortLinkError,
  UpdateShortLinkResponse,
  UploadFileData,
  UploadFileError,
  UploadFileResponse,
  ValidateItemData,
  ValidateItemError,
  ValidateItemResponse,
} from './types.gen';

/**
 * Health check endpoint
 * Return a simple 200: OK when the server is running
 */
export const health = <ThrowOnError extends boolean = false>(
  options?: Options<HealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthResponse,
    unknown,
    ThrowOnError
  >({
    url: '/health',
    ...options,
  });
};

export const getStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/status',
      ...options,
    },
  );
};

/**
 * Register with email and name
 * Register with email and name, protected by a captcha. The captcha is used to prevent brute force attacks.
 */
export const register = <ThrowOnError extends boolean = false>(
  options: Options<RegisterData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    RegisterResponse,
    RegisterError,
    ThrowOnError
  >({
    url: '/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Login with email
 * Login with email, protected by a captcha. The captcha is used to prevent brute force attacks.
 */
export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LoginResponse,
    LoginError,
    ThrowOnError
  >({
    url: '/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Authentication validating the token
 * Authenticate to obtain session cookie given provided token and verifier
 */
export const authenticate = <ThrowOnError extends boolean = false>(
  options: Options<AuthenticateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    AuthenticateError,
    ThrowOnError
  >({
    url: '/auth',
    ...options,
  });
};

export const getLogout = <ThrowOnError extends boolean = false>(
  options?: Options<GetLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/logout',
      ...options,
    },
  );
};

/**
 * Log in with email and password
 * Log in with email and password. The user must provide a valid email, password, and captcha. The captcha is used to prevent brute force attacks.
 */
export const postLoginPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostLoginPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/login-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update the password of the authenticated member
 * Update the password of the authenticated member. The user must provide the current password and the new password.
 */
export const patchPassword = <ThrowOnError extends boolean = false>(
  options: Options<PatchPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchPasswordResponse,
    PatchPasswordError,
    ThrowOnError
  >({
    url: '/password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Set a password for the authenticated member
 * Set a password for the authenticated member. This is only possible if the member does not have a password set already.
 */
export const postPassword = <ThrowOnError extends boolean = false>(
  options: Options<PostPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPasswordResponse,
    PostPasswordError,
    ThrowOnError
  >({
    url: '/password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Confirm the reset password request
 * Confirm the reset password request. This will change the password of the member associated with the reset password request.
 */
export const patchPasswordReset = <ThrowOnError extends boolean = false>(
  options: Options<PatchPasswordResetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchPasswordResetResponse,
    PatchPasswordResetError,
    ThrowOnError
  >({
    url: '/password/reset',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create a reset password request
 * Create a reset password request. This will send an email to the member in his language with a link to reset the password. The link will be valid for a limited time.
 */
export const postPasswordReset = <ThrowOnError extends boolean = false>(
  options: Options<PostPasswordResetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostPasswordResetResponse,
    PostPasswordResetError,
    ThrowOnError
  >({
    url: '/password/reset',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get the current password status of the authenticated member
 * Return whether the authenticated member has a password defined.
 */
export const getMembersCurrentPasswordStatus = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetMembersCurrentPasswordStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMembersCurrentPasswordStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/members/current/password/status',
    ...options,
  });
};

/**
 * Register with email and name
 * Register with email and name, protected by a captcha and challenge. The captcha and challenge are used to prevent brute force attacks.
 */
export const registerMobile = <ThrowOnError extends boolean = false>(
  options: Options<RegisterMobileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    RegisterMobileResponse,
    RegisterMobileError,
    ThrowOnError
  >({
    url: '/m/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Login with email
 * Login with email, protected by a captcha and challenge. The captcha and challenge are used to prevent brute force attacks.
 */
export const loginMobile = <ThrowOnError extends boolean = false>(
  options: Options<LoginMobileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LoginMobileResponse,
    LoginMobileError,
    ThrowOnError
  >({
    url: '/m/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Login with email and password
 * Login with email and password, protected by a captcha and challenge. The captcha and challenge are used to prevent brute force attacks.
 */
export const loginWithPasswordMobile = <ThrowOnError extends boolean = false>(
  options: Options<LoginWithPasswordMobileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LoginWithPasswordMobileResponse,
    LoginWithPasswordMobileError,
    ThrowOnError
  >({
    url: '/m/login-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Authentication validating the token
 * Authenticate to obtain session cookie given provided token and verifier
 */
export const authenticateMobile = <ThrowOnError extends boolean = false>(
  options: Options<AuthenticateMobileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthenticateMobileResponse,
    AuthenticateMobileError,
    ThrowOnError
  >({
    url: '/m/auth',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const getMAuthRefresh = <ThrowOnError extends boolean = false>(
  options?: Options<GetMAuthRefreshData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/m/auth/refresh',
      ...options,
    },
  );
};

/**
 * Authentication on the web with mobile token
 * Obtain session cookie to authenticate on the web given provided mobile JWT token. Redirect to given url.
 */
export const authenticateMobileToWeb = <ThrowOnError extends boolean = false>(
  options: Options<AuthenticateMobileToWebData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    AuthenticateMobileToWebError,
    ThrowOnError
  >({
    url: '/m/auth/web',
    ...options,
  });
};

export const getWs = <ThrowOnError extends boolean = false>(
  options?: Options<GetWsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/ws',
      ...options,
    },
  );
};

export const getMembersActions = <ThrowOnError extends boolean = false>(
  options?: Options<GetMembersActionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/members/actions',
      ...options,
    },
  );
};

export const deleteMembersMembersByIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteMembersMembersByIdDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/members/members/{id}/delete',
    ...options,
  });
};

/**
 * Delete authenticated account
 * Delete authenticated account. This action is irreversible!
 */
export const deleteCurrentAccount = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteCurrentAccountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteCurrentAccountResponse,
    DeleteCurrentAccountError,
    ThrowOnError
  >({
    url: '/members/current',
    ...options,
  });
};

/**
 * Get information of current authenticated account
 * Get information of current authenticated account, that can be a member or a guest.
 */
export const getCurrentAccount = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentAccountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentAccountResponse,
    GetCurrentAccountError,
    ThrowOnError
  >({
    url: '/members/current',
    ...options,
  });
};

/**
 * Update authenticated account
 * Update authenticated account, such as name or language.
 */
export const updateCurrentAccount = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateCurrentAccountData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateCurrentAccountResponse,
    UpdateCurrentAccountError,
    ThrowOnError
  >({
    url: '/members/current',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get storage values
 * Get amount of storage used for current member, and its maximum storage value.
 */
export const getStorage = <ThrowOnError extends boolean = false>(
  options?: Options<GetStorageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStorageResponse,
    GetStorageError,
    ThrowOnError
  >({
    url: '/members/current/storage',
    ...options,
  });
};

/**
 * Get storage files data
 * Get files data counted in storage of current member.
 */
export const getStorageFiles = <ThrowOnError extends boolean = false>(
  options: Options<GetStorageFilesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStorageFilesResponse,
    GetStorageFilesError,
    ThrowOnError
  >({
    url: '/members/current/storage/files',
    ...options,
  });
};

/**
 * Get member by id
 * Get member by id.
 */
export const getOneMember = <ThrowOnError extends boolean = false>(
  options: Options<GetOneMemberData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOneMemberResponse,
    GetOneMemberError,
    ThrowOnError
  >({
    url: '/members/{id}',
    ...options,
  });
};

/**
 * @deprecated
 */
export const patchMembersById = <ThrowOnError extends boolean = false>(
  options: Options<PatchMembersByIdData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchMembersByIdResponse,
    PatchMembersByIdError,
    ThrowOnError
  >({
    url: '/members/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Change email
 * Change email for current authenticated member.
 */
export const patchChangeEmail = <ThrowOnError extends boolean = false>(
  options?: Options<PatchChangeEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchChangeEmailResponse,
    PatchChangeEmailError,
    ThrowOnError
  >({
    url: '/members/current/email/change',
    ...options,
  });
};

/**
 * Request to change email
 * Request to change email for current authenticated member.
 */
export const postChangeEmail = <ThrowOnError extends boolean = false>(
  options: Options<PostChangeEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostChangeEmailResponse,
    PostChangeEmailError,
    ThrowOnError
  >({
    url: '/members/current/email/change',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const postMembersAvatar = <ThrowOnError extends boolean = false>(
  options?: Options<PostMembersAvatarData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostMembersAvatarResponse,
    unknown,
    ThrowOnError
  >({
    url: '/members/avatar',
    ...options,
  });
};

/**
 * Get a member's avatar
 * Get a member's avatar at given size. The return value is empty if the member did not previously uploaded an avatar. Since guests don't have avatars, the return value will also be empty.
 */
export const downloadAvatar = <ThrowOnError extends boolean = false>(
  options: Options<DownloadAvatarData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DownloadAvatarResponse,
    DownloadAvatarError,
    ThrowOnError
  >({
    url: '/members/{id}/avatar/{size}',
    ...options,
  });
};

/**
 * Get profile of current member
 * Get profile of current member
 */
export const getOwnProfile = <ThrowOnError extends boolean = false>(
  options?: Options<GetOwnProfileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOwnProfileResponse,
    GetOwnProfileError,
    ThrowOnError
  >({
    url: '/members/profile/own',
    ...options,
  });
};

/**
 * Get profile of given member
 * Get profile of given member
 */
export const getMemberProfile = <ThrowOnError extends boolean = false>(
  options: Options<GetMemberProfileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMemberProfileResponse,
    GetMemberProfileError,
    ThrowOnError
  >({
    url: '/members/profile/{memberId}',
    ...options,
  });
};

/**
 * Update profile of current member
 * Update profile of current member
 */
export const updateOwnProfile = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateOwnProfileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateOwnProfileResponse,
    UpdateOwnProfileError,
    ThrowOnError
  >({
    url: '/members/profile/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create profile for current member
 * Create profile for current member.
 */
export const createOwnProfile = <ThrowOnError extends boolean = false>(
  options: Options<CreateOwnProfileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateOwnProfileResponse,
    CreateOwnProfileError,
    ThrowOnError
  >({
    url: '/members/profile/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Request all related data of authenticated member
 * Request a download link to have access to all data related to the authenticated user. The link is valid for one week.
 */
export const exportMemberData = <ThrowOnError extends boolean = false>(
  options?: Options<ExportMemberDataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    ExportMemberDataResponse,
    ExportMemberDataError,
    ThrowOnError
  >({
    url: '/members/export-data/',
    ...options,
  });
};

/**
 * Get list of available apps
 * Get list of available apps
 */
export const getAppList = <ThrowOnError extends boolean = false>(
  options?: Options<GetAppListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAppListResponse,
    GetAppListError,
    ThrowOnError
  >({
    url: '/app-items/list',
    ...options,
  });
};

/**
 * Get the user's most used apps
 * Get a list of the apps the user has used the most to ease the addition of new apps.
 */
export const getOwnMostUsedApps = <ThrowOnError extends boolean = false>(
  options?: Options<GetOwnMostUsedAppsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOwnMostUsedAppsResponse,
    GetOwnMostUsedAppsError,
    ThrowOnError
  >({
    url: '/app-items/most-used',
    ...options,
  });
};

/**
 * Generate auth token for an app
 * Generate auth token for an app to access app API
 */
export const generateAppToken = <ThrowOnError extends boolean = false>(
  options: Options<GenerateAppTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    GenerateAppTokenResponse,
    GenerateAppTokenError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/api-access-token',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get context information of an app
 * Get context information of an app
 */
export const getAppContext = <ThrowOnError extends boolean = false>(
  options: Options<GetAppContextData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAppContextResponse,
    unknown,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/context',
    ...options,
  });
};

/**
 * Get all app data of an app
 * Get app data saved for an app, depending on the permission of the user and the data visibility.
 */
export const getAppDataForApp = <ThrowOnError extends boolean = false>(
  options: Options<GetAppDataForAppData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAppDataForAppResponse,
    GetAppDataForAppError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-data',
    ...options,
  });
};

/**
 * Create a user data for an app
 * Create a user data in an app given data and type.
 */
export const createAppData = <ThrowOnError extends boolean = false>(
  options: Options<CreateAppDataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateAppDataResponse,
    CreateAppDataError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-data',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete an app data
 * Delete a given app data.
 */
export const deleteAppData = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAppDataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteAppDataResponse,
    DeleteAppDataError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-data/{id}',
    ...options,
  });
};

/**
 * Update an app data
 * Update a given app data with new data.
 */
export const updateAppData = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAppDataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateAppDataResponse,
    UpdateAppDataError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-data/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create app data file
 * Upload a file to create a corresponding app data. The created app data will be "file" and visibility member. The data property will contain the file properties.
 */
export const createAppDataFile = <ThrowOnError extends boolean = false>(
  options?: Options<CreateAppDataFileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateAppDataFileResponse,
    CreateAppDataFileError,
    ThrowOnError
  >({
    url: '/app-items/app-data/upload',
    ...options,
  });
};

/**
 * Download app data file
 * Download app data file.
 */
export const downloadAppDataFile = <ThrowOnError extends boolean = false>(
  options: Options<DownloadAppDataFileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DownloadAppDataFileResponse,
    DownloadAppDataFileError,
    ThrowOnError
  >({
    url: '/app-items/app-data/{id}/download',
    ...options,
  });
};

/**
 * Get all actions of an app
 * Get all actions saved for an app.
 */
export const getAppActionsForApp = <ThrowOnError extends boolean = false>(
  options: Options<GetAppActionsForAppData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAppActionsForAppResponse,
    GetAppActionsForAppError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-action',
    ...options,
  });
};

/**
 * Create an action happening in an app
 * Create an action happening in an app given data and type.
 */
export const createAppAction = <ThrowOnError extends boolean = false>(
  options: Options<CreateAppActionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateAppActionResponse,
    CreateAppActionError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-action',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get all settings of an app
 * Get all settings for an app.
 */
export const getAppSettingsForApp = <ThrowOnError extends boolean = false>(
  options: Options<GetAppSettingsForAppData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAppSettingsForAppResponse,
    GetAppSettingsForAppError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-settings',
    ...options,
  });
};

/**
 * Create a setting for an app
 * Create a setting in an app given data and name. Only admins can create settings.
 */
export const createAppSetting = <ThrowOnError extends boolean = false>(
  options: Options<CreateAppSettingData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateAppSettingResponse,
    CreateAppSettingError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-settings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete app setting
 * Delete given app setting.
 */
export const deleteAppSetting = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAppSettingData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteAppSettingResponse,
    DeleteAppSettingError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-settings/{id}',
    ...options,
  });
};

/**
 * Update app setting
 * Update given app setting with new data. Only admins can update settings.
 */
export const updateAppSetting = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAppSettingData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateAppSettingResponse,
    UpdateAppSettingError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/app-settings/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create app setting file
 * Upload a file to create a corresponding app setting. The setting's name can be defined in the file body (form data) as "name", otherwise it will default to "file"
 */
export const createAppSettingFile = <ThrowOnError extends boolean = false>(
  options?: Options<CreateAppSettingFileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateAppSettingFileResponse,
    CreateAppSettingFileError,
    ThrowOnError
  >({
    url: '/app-items/app-settings/upload',
    ...options,
  });
};

/**
 * Download app setting file
 * Download app setting file.
 */
export const downloadAppSettingFile = <ThrowOnError extends boolean = false>(
  options: Options<DownloadAppSettingFileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DownloadAppSettingFileResponse,
    DownloadAppSettingFileError,
    ThrowOnError
  >({
    url: '/app-items/app-settings/{id}/download',
    ...options,
  });
};

/**
 * Get a prompt completion from a chatbot
 * Given a prompt, it returns a completion from a chatbot.
 */
export const createChatbotCompletionPrompt = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateChatbotCompletionPromptData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateChatbotCompletionPromptResponse,
    CreateChatbotCompletionPromptError,
    ThrowOnError
  >({
    url: '/app-items/{itemId}/chat-bot',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get type of item login
 * Get type of item login. Return null if the item does not allow item login.
 */
export const getItemLoginSchemaType = <ThrowOnError extends boolean = false>(
  options: Options<GetItemLoginSchemaTypeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemLoginSchemaTypeResponse,
    GetItemLoginSchemaTypeError,
    ThrowOnError
  >({
    url: '/items/{id}/login-schema-type',
    ...options,
  });
};

/**
 * Delete item login schema
 * Delete item login data and all related users.
 */
export const deleteItemLoginSchema = <ThrowOnError extends boolean = false>(
  options: Options<DeleteItemLoginSchemaData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteItemLoginSchemaResponse,
    DeleteItemLoginSchemaError,
    ThrowOnError
  >({
    url: '/items/{id}/login-schema',
    ...options,
  });
};

/**
 * Get item login data
 * Get item login data.
 */
export const getItemLoginSchema = <ThrowOnError extends boolean = false>(
  options: Options<GetItemLoginSchemaData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemLoginSchemaResponse,
    GetItemLoginSchemaError,
    ThrowOnError
  >({
    url: '/items/{id}/login-schema',
    ...options,
  });
};

/**
 * Update item login data
 * Update item login's status and/or type.
 */
export const updateItemLoginSchema = <ThrowOnError extends boolean = false>(
  options: Options<UpdateItemLoginSchemaData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<
    UpdateItemLoginSchemaResponse,
    UpdateItemLoginSchemaError,
    ThrowOnError
  >({
    url: '/items/{id}/login-schema',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Login or Register in item as guest
 * Log in to an item with necessary credentials depending on item login's type. If the username does not exist, a guest account is created and is given access.
 */
export const loginOrRegisterAsGuest = <ThrowOnError extends boolean = false>(
  options: Options<LoginOrRegisterAsGuestData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LoginOrRegisterAsGuestResponse,
    LoginOrRegisterAsGuestError,
    ThrowOnError
  >({
    url: '/items/{id}/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get all bookmarked instances of the current member
 * Get all bookmarked instances of the current member
 */
export const getOwnFavorite = <ThrowOnError extends boolean = false>(
  options?: Options<GetOwnFavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOwnFavoriteResponse,
    GetOwnFavoriteError,
    ThrowOnError
  >({
    url: '/items/favorite',
    ...options,
  });
};

/**
 * Remove item from bookmarks
 * Remove item from bookmarks
 */
export const deleteFavorite = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteFavoriteResponse,
    DeleteFavoriteError,
    ThrowOnError
  >({
    url: '/items/favorite/{itemId}',
    ...options,
  });
};

/**
 * Bookmark item
 * Bookmark item
 */
export const createFavorite = <ThrowOnError extends boolean = false>(
  options: Options<CreateFavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateFavoriteResponse,
    CreateFavoriteError,
    ThrowOnError
  >({
    url: '/items/favorite/{itemId}',
    ...options,
  });
};

/**
 * Get collections for member
 * Get packed collections for member, used in the builder view of the member.
 */
export const getCollectionsForMember = <ThrowOnError extends boolean = false>(
  options: Options<GetCollectionsForMemberData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCollectionsForMemberResponse,
    GetCollectionsForMemberError,
    ThrowOnError
  >({
    url: '/items/collections/members/{memberId}',
    ...options,
  });
};

/**
 * Get information of a collection
 * Get information of a collection, including views count.
 */
export const getCollectionInformations = <ThrowOnError extends boolean = false>(
  options: Options<GetCollectionInformationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCollectionInformationsResponse,
    GetCollectionInformationsError,
    ThrowOnError
  >({
    url: '/items/collections/{itemId}/informations',
    ...options,
  });
};

export const getItemsCollectionsInformations = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetItemsCollectionsInformationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemsCollectionsInformationsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/items/collections/informations',
    ...options,
  });
};

/**
 * Publish an item
 * Publish an item. It will become listed in the Library.
 */
export const publishItem = <ThrowOnError extends boolean = false>(
  options: Options<PublishItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PublishItemResponse,
    PublishItemError,
    ThrowOnError
  >({
    url: '/items/collections/{itemId}/publish',
    ...options,
  });
};

/**
 * Unpublish an item
 * Unpublish an item. It will stop being available in the Library.
 */
export const unpublishItem = <ThrowOnError extends boolean = false>(
  options: Options<UnpublishItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    UnpublishItemResponse,
    UnpublishItemError,
    ThrowOnError
  >({
    url: '/items/collections/{itemId}/unpublish',
    ...options,
  });
};

/**
 * Get collections given search query
 * Get collections given search query. the results are highlighted given the search query.
 */
export const collectionSearch = <ThrowOnError extends boolean = false>(
  options?: Options<CollectionSearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CollectionSearchResponse,
    CollectionSearchError,
    ThrowOnError
  >({
    url: '/items/collections/search',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get facets for a given facet name
 * Get list of facets and how many collections are tagged with those given a facet name.
 */
export const getFacetsForName = <ThrowOnError extends boolean = false>(
  options: Options<GetFacetsForNameData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    GetFacetsForNameResponse,
    GetFacetsForNameError,
    ThrowOnError
  >({
    url: '/items/collections/facets',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get most liked collections
 * Get most liked collections.
 */
export const getMostLikedCollections = <ThrowOnError extends boolean = false>(
  options?: Options<GetMostLikedCollectionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMostLikedCollectionsResponse,
    GetMostLikedCollectionsError,
    ThrowOnError
  >({
    url: '/items/collections/liked',
    ...options,
  });
};

/**
 * Get most recent collections
 * Get most recently published and modified collections
 */
export const getMostRecentCollections = <ThrowOnError extends boolean = false>(
  options?: Options<GetMostRecentCollectionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMostRecentCollectionsResponse,
    GetMostRecentCollectionsError,
    ThrowOnError
  >({
    url: '/items/collections/recent',
    ...options,
  });
};

export const getItemsCollectionsSearchRebuild = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetItemsCollectionsSearchRebuildData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/items/collections/search/rebuild',
      ...options,
    },
  );
};

export const deleteItemsByIdThumbnails = <ThrowOnError extends boolean = false>(
  options: Options<DeleteItemsByIdThumbnailsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/items/{id}/thumbnails',
    ...options,
  });
};

export const postItemsByIdThumbnails = <ThrowOnError extends boolean = false>(
  options: Options<PostItemsByIdThumbnailsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/items/{id}/thumbnails',
    ...options,
  });
};

/**
 * Get an item's thumbnail
 * Get an item's thumbnail at given size. The return value is null if the item did not previously have a thumbnail.
 */
export const downloadItemThumbnail = <ThrowOnError extends boolean = false>(
  options: Options<DownloadItemThumbnailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DownloadItemThumbnailResponse,
    DownloadItemThumbnailError,
    ThrowOnError
  >({
    url: '/items/{id}/thumbnails/{size}',
    ...options,
  });
};

/**
 * Upload files
 * Upload files to create corresponding items.
 */
export const uploadFile = <ThrowOnError extends boolean = false>(
  options?: Options<UploadFileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    UploadFileResponse,
    UploadFileError,
    ThrowOnError
  >({
    url: '/items/upload',
    ...options,
  });
};

/**
 * Download file
 * Download file.
 */
export const downloadFile = <ThrowOnError extends boolean = false>(
  options: Options<DownloadFileData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    DownloadFileResponse,
    DownloadFileError,
    ThrowOnError
  >({
    url: '/items/{id}/download',
    ...options,
  });
};

/**
 * Delete visibility of item
 * Delete visibility of item with given type.
 */
export const deleteVisibility = <ThrowOnError extends boolean = false>(
  options: Options<DeleteVisibilityData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteVisibilityResponse,
    DeleteVisibilityError,
    ThrowOnError
  >({
    url: '/items/{itemId}/visibilities/{type}',
    ...options,
  });
};

/**
 * Create visibility on item
 * Create visibility on item with given visibility that will apply on itself and its descendants.
 */
export const createVisibility = <ThrowOnError extends boolean = false>(
  options: Options<CreateVisibilityData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateVisibilityResponse,
    CreateVisibilityError,
    ThrowOnError
  >({
    url: '/items/{itemId}/visibilities/{type}',
    ...options,
  });
};

/**
 * Create folder
 * Create folder.
 */
export const createFolder = <ThrowOnError extends boolean = false>(
  options: Options<CreateFolderData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateFolderResponse,
    CreateFolderError,
    ThrowOnError
  >({
    url: '/items/folders',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update folder
 * Update folder given body.
 */
export const updateFolder = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFolderData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateFolderResponse,
    UpdateFolderError,
    ThrowOnError
  >({
    url: '/items/folders/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create a folder with a thumbnail
 * Create a folder with a thumbnail. The data is sent using a form-data.
 */
export const createFolderWithThumbnail = <ThrowOnError extends boolean = false>(
  options?: Options<CreateFolderWithThumbnailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateFolderWithThumbnailResponse,
    CreateFolderWithThumbnailError,
    ThrowOnError
  >({
    url: '/items/folders-with-thumbnail',
    ...options,
  });
};

/**
 * Create app
 * Create app.
 */
export const createApp = <ThrowOnError extends boolean = false>(
  options: Options<CreateAppData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateAppResponse,
    CreateAppError,
    ThrowOnError
  >({
    url: '/items/apps',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update app
 * Update app given body.
 */
export const updateApp = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAppData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateAppResponse,
    UpdateAppError,
    ThrowOnError
  >({
    url: '/items/apps/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete alias
 * Delete short link's alias.
 */
export const deleteAlias = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAliasData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteAliasResponse,
    DeleteAliasError,
    ThrowOnError
  >({
    url: '/items/short-links/{alias}',
    ...options,
  });
};

/**
 * Get redirection for short link
 * Get redirection for given short link.
 */
export const getShortLinkRedirection = <ThrowOnError extends boolean = false>(
  options: Options<GetShortLinkRedirectionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    GetShortLinkRedirectionError,
    ThrowOnError
  >({
    url: '/items/short-links/{alias}',
    ...options,
  });
};

/**
 * Update short link
 * Update the alias of the short link.
 */
export const updateShortLink = <ThrowOnError extends boolean = false>(
  options: Options<UpdateShortLinkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateShortLinkResponse,
    UpdateShortLinkError,
    ThrowOnError
  >({
    url: '/items/short-links/{alias}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get whether an alias is available
 * Get whether an alias is available.
 */
export const getShortLinkAvailability = <ThrowOnError extends boolean = false>(
  options: Options<GetShortLinkAvailabilityData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetShortLinkAvailabilityResponse,
    GetShortLinkAvailabilityError,
    ThrowOnError
  >({
    url: '/items/short-links/available/{alias}',
    ...options,
  });
};

/**
 * Get all short links for item
 * Get all short links created for an item. The response could be an empty object or a key-value with at least one platform and the alias.
 */
export const getShortLinksForItem = <ThrowOnError extends boolean = false>(
  options: Options<GetShortLinksForItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetShortLinksForItemResponse,
    GetShortLinksForItemError,
    ThrowOnError
  >({
    url: '/items/short-links/list/{itemId}',
    ...options,
  });
};

/**
 * Create short link for item
 * Create short link for item.
 */
export const createShortLink = <ThrowOnError extends boolean = false>(
  options: Options<CreateShortLinkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateShortLinkResponse,
    CreateShortLinkError,
    ThrowOnError
  >({
    url: '/items/short-links/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const getItemsPublicationByItemIdStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetItemsPublicationByItemIdStatusData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/items/publication/{itemId}/status',
      ...options,
    },
  );
};

export const getItemsH5pAssetsIntegrationHtml = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetItemsH5pAssetsIntegrationHtmlData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/items/h5p-assets/integration.html',
      ...options,
    },
  );
};

/**
 * Import H5P file
 * Import H5P file and create corresponding item.
 */
export const importH5P = <ThrowOnError extends boolean = false>(
  options?: Options<ImportH5pData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    ImportH5pResponse,
    ImportH5pError,
    ThrowOnError
  >({
    url: '/items/h5p-import',
    ...options,
  });
};

/**
 * Create etherpad
 * Create an etherpad item.
 */
export const createEtherpad = <ThrowOnError extends boolean = false>(
  options: Options<CreateEtherpadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateEtherpadResponse,
    CreateEtherpadError,
    ThrowOnError
  >({
    url: '/items/etherpad/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update etherpad
 * Update etherpad permission of readers.
 */
export const updateEtherpad = <ThrowOnError extends boolean = false>(
  options: Options<UpdateEtherpadData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateEtherpadResponse,
    UpdateEtherpadError,
    ThrowOnError
  >({
    url: '/items/etherpad/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get etherpad information
 * Get etherpad information from item id
 */
export const getEtherpadFromItem = <ThrowOnError extends boolean = false>(
  options: Options<GetEtherpadFromItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetEtherpadFromItemResponse,
    GetEtherpadFromItemError,
    ThrowOnError
  >({
    url: '/items/etherpad/view/{itemId}',
    ...options,
  });
};

/**
 * Import ZIP content
 * Import and extract the content of a ZIP, creating the corresponding structure and items.
 */
export const importZip = <ThrowOnError extends boolean = false>(
  options?: Options<ImportZipData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    ImportZipError,
    ThrowOnError
  >({
    url: '/items/zip-import',
    ...options,
  });
};

/**
 * Export content
 * Export content. Return raw file for single item, or a ZIP with structure and items for a folder.
 */
export const exportZip = <ThrowOnError extends boolean = false>(
  options: Options<ExportZipData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ExportZipResponse,
    ExportZipError,
    ThrowOnError
  >({
    url: '/items/{itemId}/export',
    ...options,
  });
};

/**
 * Get metadata information from iframely for given url
 * Get metadata information from iframely for given url.
 */
export const getLinkMetadata = <ThrowOnError extends boolean = false>(
  options: Options<GetLinkMetadataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetLinkMetadataResponse,
    GetLinkMetadataError,
    ThrowOnError
  >({
    url: '/items/embedded-links/metadata',
    ...options,
  });
};

/**
 * Create link
 * Create link.
 */
export const createLink = <ThrowOnError extends boolean = false>(
  options: Options<CreateLinkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateLinkResponse,
    CreateLinkError,
    ThrowOnError
  >({
    url: '/items/embedded-links/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update link
 * Update link given body.
 */
export const updateLink = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLinkData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateLinkResponse,
    UpdateLinkError,
    ThrowOnError
  >({
    url: '/items/embedded-links/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create document
 * Create document with given payload. The content will be sanitized.
 */
export const createDocument = <ThrowOnError extends boolean = false>(
  options: Options<CreateDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateDocumentResponse,
    CreateDocumentError,
    ThrowOnError
  >({
    url: '/items/documents/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Update document
 * Update document given payload. The content will be sanitized.
 */
export const updateDocument = <ThrowOnError extends boolean = false>(
  options: Options<UpdateDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateDocumentResponse,
    UpdateDocumentError,
    ThrowOnError
  >({
    url: '/items/documents/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get invitation
 * Get invitation by id
 */
export const getInvitationById = <ThrowOnError extends boolean = false>(
  options: Options<GetInvitationByIdData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetInvitationByIdResponse,
    GetInvitationByIdError,
    ThrowOnError
  >({
    url: '/items/invitations/{id}',
    ...options,
  });
};

/**
 * Invite user by email to access an item
 * Invite non-registered user with their email to access given item.
 */
export const createInvitation = <ThrowOnError extends boolean = false>(
  options: Options<CreateInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateInvitationResponse,
    CreateInvitationError,
    ThrowOnError
  >({
    url: '/items/{id}/invite',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get invitations for a given item
 * Get invitation for a given item
 */
export const getInvitationForItem = <ThrowOnError extends boolean = false>(
  options: Options<GetInvitationForItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetInvitationForItemResponse,
    GetInvitationForItemError,
    ThrowOnError
  >({
    url: '/items/{id}/invitations',
    ...options,
  });
};

/**
 * Delete invitation
 * Delete invitation
 */
export const deleteInvitation = <ThrowOnError extends boolean = false>(
  options: Options<DeleteInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteInvitationResponse,
    DeleteInvitationError,
    ThrowOnError
  >({
    url: '/items/{id}/invitations/{invitationId}',
    ...options,
  });
};

/**
 * Update invitation
 * Update invitation's name or permission
 */
export const updateInvitation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateInvitationResponse,
    UpdateInvitationError,
    ThrowOnError
  >({
    url: '/items/{id}/invitations/{invitationId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Send invitation
 * Send invitation
 */
export const sendInvitation = <ThrowOnError extends boolean = false>(
  options: Options<SendInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    SendInvitationResponse,
    SendInvitationError,
    ThrowOnError
  >({
    url: '/items/{id}/invitations/{invitationId}/send',
    ...options,
  });
};

/**
 * Invite users from CSV file in groups given a template
 * Invite users by groups from CSV. This will create groups of users having access to corresponding resources from a given template.
 */
export const inviteFromCsvWithTemplate = <ThrowOnError extends boolean = false>(
  options: Options<InviteFromCsvWithTemplateData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    InviteFromCsvWithTemplateResponse,
    InviteFromCsvWithTemplateError,
    ThrowOnError
  >({
    url: '/items/{id}/invitations/upload-csv-template',
    ...options,
  });
};

/**
 * Invite users from CSV file
 * Invite users from CSV file, given their email, optional name and permission level.
 */
export const inviteFromCsv = <ThrowOnError extends boolean = false>(
  options: Options<InviteFromCsvData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    InviteFromCsvResponse,
    InviteFromCsvError,
    ThrowOnError
  >({
    url: '/items/{id}/invitations/upload-csv',
    ...options,
  });
};

/**
 * Create an item membership for the logged in user if there is an Item Login
 * Create an item membership on the item with the given ID for the logged in user.
 * The item needs to be associated with an Item Login.
 */
export const enroll = <ThrowOnError extends boolean = false>(
  options: Options<EnrollData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    EnrollResponse,
    unknown,
    ThrowOnError
  >({
    url: '/items/{itemId}/enroll',
    ...options,
  });
};

/**
 * Get flag types
 * Get available flag types.
 */
export const getFlagTypes = <ThrowOnError extends boolean = false>(
  options?: Options<GetFlagTypesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetFlagTypesResponse,
    GetFlagTypesError,
    ThrowOnError
  >({
    url: '/items/flags',
    ...options,
  });
};

/**
 * Flag item
 * Flag item with given type.
 */
export const createItemFlag = <ThrowOnError extends boolean = false>(
  options: Options<CreateItemFlagData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateItemFlagResponse,
    CreateItemFlagError,
    ThrowOnError
  >({
    url: '/items/{itemId}/flags',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get own recycled items
 * Get own recycled items.
 */
export const getOwnRecycledItems = <ThrowOnError extends boolean = false>(
  options: Options<GetOwnRecycledItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOwnRecycledItemsResponse,
    GetOwnRecycledItemsError,
    ThrowOnError
  >({
    url: '/items/recycled',
    ...options,
  });
};

/**
 * Recycle many items
 * Recycle many items. This will create as many recycled item data.
 */
export const recycleManyItems = <ThrowOnError extends boolean = false>(
  options: Options<RecycleManyItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    RecycleManyItemsResponse,
    RecycleManyItemsError,
    ThrowOnError
  >({
    url: '/items/recycle',
    ...options,
  });
};

/**
 * Restore many items
 * Restore many items. This will delete as many recycled item data.
 */
export const restoreManyItems = <ThrowOnError extends boolean = false>(
  options: Options<RestoreManyItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    RestoreManyItemsResponse,
    RestoreManyItemsError,
    ThrowOnError
  >({
    url: '/items/restore',
    ...options,
  });
};

/**
 * Get latest validation information.
 * Get latest validation information. Returns null if no validation has been performed before.
 */
export const getLatestItemValidationGroup = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetLatestItemValidationGroupData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetLatestItemValidationGroupResponse,
    GetLatestItemValidationGroupError,
    ThrowOnError
  >({
    url: '/items/{itemId}/validations/latest',
    ...options,
  });
};

/**
 * Get item validation group by id
 * Get item validation group by id.
 */
export const getItemValidationGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetItemValidationGroupData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemValidationGroupResponse,
    GetItemValidationGroupError,
    ThrowOnError
  >({
    url: '/items/{itemId}/validations/{itemValidationGroupId}',
    ...options,
  });
};

/**
 * Validate item
 * Validate item's tree against many processes, such as nudity detection.
 */
export const validateItem = <ThrowOnError extends boolean = false>(
  options: Options<ValidateItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    ValidateItemResponse,
    ValidateItemError,
    ThrowOnError
  >({
    url: '/items/{itemId}/validate',
    ...options,
  });
};

/**
 * Get likes for current member
 * Get likes for current member. Item property is a packed item.
 */
export const getLikesForCurrentMember = <ThrowOnError extends boolean = false>(
  options?: Options<GetLikesForCurrentMemberData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetLikesForCurrentMemberResponse,
    GetLikesForCurrentMemberError,
    ThrowOnError
  >({
    url: '/items/liked',
    ...options,
  });
};

/**
 * Get likes for item
 * Get likes for item.
 */
export const getLikesForItem = <ThrowOnError extends boolean = false>(
  options: Options<GetLikesForItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetLikesForItemResponse,
    GetLikesForItemError,
    ThrowOnError
  >({
    url: '/items/{itemId}/likes',
    ...options,
  });
};

/**
 * Unlike item
 * Unlike item.
 */
export const deleteItemLike = <ThrowOnError extends boolean = false>(
  options: Options<DeleteItemLikeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteItemLikeResponse,
    DeleteItemLikeError,
    ThrowOnError
  >({
    url: '/items/{itemId}/like',
    ...options,
  });
};

/**
 * Like item
 * Like item.
 */
export const createItemLike = <ThrowOnError extends boolean = false>(
  options: Options<CreateItemLikeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateItemLikeResponse,
    CreateItemLikeError,
    ThrowOnError
  >({
    url: '/items/{itemId}/like',
    ...options,
  });
};

/**
 * Clear all mentions for current user
 * Clear all mentions for current user.
 */
export const clearAllMentions = <ThrowOnError extends boolean = false>(
  options?: Options<ClearAllMentionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    ClearAllMentionsResponse,
    ClearAllMentionsError,
    ThrowOnError
  >({
    url: '/items/mentions',
    ...options,
  });
};

/**
 * Get mentions for current user
 * Get mentions for current user.
 */
export const getOwnMentions = <ThrowOnError extends boolean = false>(
  options?: Options<GetOwnMentionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOwnMentionsResponse,
    GetOwnMentionsError,
    ThrowOnError
  >({
    url: '/items/mentions',
    ...options,
  });
};

/**
 * Delete mention
 * Delete mention.
 */
export const deleteMention = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMentionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteMentionResponse,
    DeleteMentionError,
    ThrowOnError
  >({
    url: '/items/mentions/{mentionId}',
    ...options,
  });
};

/**
 * Patch mention
 * Patch mention's status.
 */
export const patchMention = <ThrowOnError extends boolean = false>(
  options: Options<PatchMentionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchMentionResponse,
    PatchMentionError,
    ThrowOnError
  >({
    url: '/items/mentions/{mentionId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Clear messages of chat
 * Clear messages of chat for given item.
 */
export const clearChatMessage = <ThrowOnError extends boolean = false>(
  options: Options<ClearChatMessageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    ClearChatMessageResponse,
    ClearChatMessageError,
    ThrowOnError
  >({
    url: '/items/{itemId}/chat',
    ...options,
  });
};

/**
 * Get chat
 * Get chat object for given item.
 */
export const getChat = <ThrowOnError extends boolean = false>(
  options: Options<GetChatData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetChatResponse,
    GetChatError,
    ThrowOnError
  >({
    url: '/items/{itemId}/chat',
    ...options,
  });
};

/**
 * Save message in chat
 * Save message in chat for given item.
 */
export const createChatMessage = <ThrowOnError extends boolean = false>(
  options: Options<CreateChatMessageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateChatMessageResponse,
    CreateChatMessageError,
    ThrowOnError
  >({
    url: '/items/{itemId}/chat',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete message in chat
 * Delete message in chat for given item.
 */
export const deleteChatMessage = <ThrowOnError extends boolean = false>(
  options: Options<DeleteChatMessageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteChatMessageResponse,
    DeleteChatMessageError,
    ThrowOnError
  >({
    url: '/items/{itemId}/chat/{messageId}',
    ...options,
  });
};

/**
 * Edit message in chat
 * Edit message in chat for given item.
 */
export const patchChatMessage = <ThrowOnError extends boolean = false>(
  options: Options<PatchChatMessageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    PatchChatMessageResponse,
    PatchChatMessageError,
    ThrowOnError
  >({
    url: '/items/{itemId}/chat/{messageId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get actions for item and its descendants
 * Get actions generated by users for the given item and its descendants.
 */
export const getItemActions = <ThrowOnError extends boolean = false>(
  options: Options<GetItemActionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemActionsResponse,
    GetItemActionsError,
    ThrowOnError
  >({
    url: '/items/{id}/actions',
    ...options,
  });
};

/**
 * Save action for item
 * Save action for item with given type and extra.
 */
export const postAction = <ThrowOnError extends boolean = false>(
  options: Options<PostActionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostActionResponse,
    PostActionError,
    ThrowOnError
  >({
    url: '/items/{id}/actions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get aggregation of actions given query strings
 * Get aggregation of actions given query strings. It is interesting for rendering anonymous average data.
 */
export const getAggregateActions = <ThrowOnError extends boolean = false>(
  options: Options<GetAggregateActionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAggregateActionsResponse,
    GetAggregateActionsError,
    ThrowOnError
  >({
    url: '/items/{id}/actions/aggregation',
    ...options,
  });
};

/**
 * Send request to export actions
 * Send request to export actions for given item. The user receives an email with a download link. The generated export is available for a week, and can be generated only once a day.
 */
export const exportActions = <ThrowOnError extends boolean = false>(
  options: Options<ExportActionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    ExportActionsResponse,
    ExportActionsError,
    ThrowOnError
  >({
    url: '/items/{id}/actions/export',
    ...options,
  });
};

/**
 * Remove a geolocation for an item
 * Remove a geolocation for an item.
 */
export const deleteGeolocation = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGeolocationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteGeolocationResponse,
    DeleteGeolocationError,
    ThrowOnError
  >({
    url: '/items/{id}/geolocation',
    ...options,
  });
};

/**
 * Get the geolocation info of the given item
 * Get the geolocation info of the given item, alongside the complete information about the item.
 */
export const getGeolocationByItem = <ThrowOnError extends boolean = false>(
  options: Options<GetGeolocationByItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGeolocationByItemResponse,
    GetGeolocationByItemError,
    ThrowOnError
  >({
    url: '/items/{id}/geolocation',
    ...options,
  });
};

/**
 * Set a geolocation on an item
 * Set a geolocation on an item.
 */
export const putGeolocation = <ThrowOnError extends boolean = false>(
  options: Options<PutGeolocationData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<
    PutGeolocationResponse,
    PutGeolocationError,
    ThrowOnError
  >({
    url: '/items/{id}/geolocation',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get items within a box defined by geographic coordinates
 * Get accessible items within a box defined by geographic coordinates, within a parent if given.
 */
export const getItemsInBox = <ThrowOnError extends boolean = false>(
  options: Options<GetItemsInBoxData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemsInBoxResponse,
    GetItemsInBoxError,
    ThrowOnError
  >({
    url: '/items/geolocation',
    ...options,
  });
};

/**
 * Get address information of given geographic coordinates
 * Get address information of given geographic coordinates. This endpoint is using a third-party API.
 */
export const geolocationReverse = <ThrowOnError extends boolean = false>(
  options: Options<GeolocationReverseData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GeolocationReverseResponse,
    GeolocationReverseError,
    ThrowOnError
  >({
    url: '/items/geolocation/reverse',
    ...options,
  });
};

/**
 * Get geographic information from a string
 * Get geographic information from a string. This endpoint is using a third-party API.
 */
export const geolocationSearch = <ThrowOnError extends boolean = false>(
  options: Options<GeolocationSearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GeolocationSearchResponse,
    GeolocationSearchError,
    ThrowOnError
  >({
    url: '/items/geolocation/search',
    ...options,
  });
};

/**
 * Get tags for item
 * Get tags for item.
 */
export const getTagsForItem = <ThrowOnError extends boolean = false>(
  options: Options<GetTagsForItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTagsForItemResponse,
    GetTagsForItemError,
    ThrowOnError
  >({
    url: '/items/{itemId}/tags',
    ...options,
  });
};

/**
 * Create tag for item
 * Create tag for the item. The tag will be associated with the given item. If the tag does not already exist in the common list of tags, it will be added and other users will see it in their suggestions.
 */
export const createTagForItem = <ThrowOnError extends boolean = false>(
  options: Options<CreateTagForItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateTagForItemResponse,
    CreateTagForItemError,
    ThrowOnError
  >({
    url: '/items/{itemId}/tags',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete tag associated with item
 * Delete tag associated with item. It does not throw if the specified tag is not originally associated with the item.
 */
export const deleteTagForItem = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTagForItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteTagForItemResponse,
    DeleteTagForItemError,
    ThrowOnError
  >({
    url: '/items/{itemId}/tags/{tagId}',
    ...options,
  });
};

/**
 * Delete many items
 * Delete many items given their ids. This endpoint is asynchronous and a feedback is returned through websockets.
 */
export const deleteManyItems = <ThrowOnError extends boolean = false>(
  options: Options<DeleteManyItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteManyItemsResponse,
    DeleteManyItemsError,
    ThrowOnError
  >({
    url: '/items/',
    ...options,
  });
};

/**
 * Get many items
 * Get many items by their ids.
 */
export const getManyItems = <ThrowOnError extends boolean = false>(
  options: Options<GetManyItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetManyItemsResponse,
    GetManyItemsError,
    ThrowOnError
  >({
    url: '/items/',
    ...options,
  });
};

/**
 * Create item
 * Create item, whose possible types are folder, app, document, embeddedLink, localFile, s3File, etherpad, h5p and shortcut.
 */
export const createItem = <ThrowOnError extends boolean = false>(
  options?: Options<CreateItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateItemResponse,
    CreateItemError,
    ThrowOnError
  >({
    url: '/items/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get item
 * Get item by its id.
 */
export const getItem = <ThrowOnError extends boolean = false>(
  options: Options<GetItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemResponse,
    GetItemError,
    ThrowOnError
  >({
    url: '/items/{id}',
    ...options,
  });
};

/**
 * Update item
 * Update item given body.
 */
export const updateItem = <ThrowOnError extends boolean = false>(
  options: Options<UpdateItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateItemResponse,
    UpdateItemError,
    ThrowOnError
  >({
    url: '/items/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get accessible items
 * Get items the user has access to
 */
export const getAccessibleItems = <ThrowOnError extends boolean = false>(
  options: Options<GetAccessibleItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAccessibleItemsResponse,
    GetAccessibleItemsError,
    ThrowOnError
  >({
    url: '/items/accessible',
    ...options,
  });
};

/**
 * @deprecated
 */
export const getItemsOwn = <ThrowOnError extends boolean = false>(
  options?: Options<GetItemsOwnData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemsOwnResponse,
    GetItemsOwnError,
    ThrowOnError
  >({
    url: '/items/own',
    ...options,
  });
};

/**
 * @deprecated
 */
export const getItemsSharedWith = <ThrowOnError extends boolean = false>(
  options?: Options<GetItemsSharedWithData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemsSharedWithResponse,
    GetItemsSharedWithError,
    ThrowOnError
  >({
    url: '/items/shared-with',
    ...options,
  });
};

/**
 * Get children of item
 * Get children of item given its id.
 */
export const getChildren = <ThrowOnError extends boolean = false>(
  options: Options<GetChildrenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetChildrenResponse,
    GetChildrenError,
    ThrowOnError
  >({
    url: '/items/{id}/children',
    ...options,
  });
};

/**
 * Get descendant items of item
 * Get descendant items of item given its id.
 */
export const getDescendantItems = <ThrowOnError extends boolean = false>(
  options: Options<GetDescendantItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDescendantItemsResponse,
    GetDescendantItemsError,
    ThrowOnError
  >({
    url: '/items/{id}/descendants',
    ...options,
  });
};

/**
 * Get parent items of item
 * Get parent items of item given its id.
 */
export const getParentItems = <ThrowOnError extends boolean = false>(
  options: Options<GetParentItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetParentItemsResponse,
    GetParentItemsError,
    ThrowOnError
  >({
    url: '/items/{id}/parents',
    ...options,
  });
};

/**
 * Reorder item
 * Reorder item within its parent given previous item id.
 */
export const reorderItem = <ThrowOnError extends boolean = false>(
  options: Options<ReorderItemData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    ReorderItemResponse,
    ReorderItemError,
    ThrowOnError
  >({
    url: '/items/{id}/reorder',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Move many items
 * Move many items given their ids to a parent target. This endpoint is asynchronous and a feedback is returned through websockets.
 */
export const moveManyItems = <ThrowOnError extends boolean = false>(
  options: Options<MoveManyItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    MoveManyItemsResponse,
    MoveManyItemsError,
    ThrowOnError
  >({
    url: '/items/move',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Copy many items
 * Copy many items given their ids in a parent target. This endpoint is asynchronous and a feedback is returned through websockets.
 */
export const copyManyItems = <ThrowOnError extends boolean = false>(
  options: Options<CopyManyItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CopyManyItemsResponse,
    CopyManyItemsError,
    ThrowOnError
  >({
    url: '/items/copy',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create an item with a thumbnail
 * Create an item with a thumbnail. The data is sent using a form-data.
 */
export const createItemWithThumbnail = <ThrowOnError extends boolean = false>(
  options?: Options<CreateItemWithThumbnailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateItemWithThumbnailResponse,
    CreateItemWithThumbnailError,
    ThrowOnError
  >({
    url: '/items/with-thumbnail',
    ...options,
  });
};

/**
 * Get all membership requests for an item
 * Get all membership requests with member information for an item by its ID
 */
export const getItemsByItemIdMembershipsRequests = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetItemsByItemIdMembershipsRequestsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemsByItemIdMembershipsRequestsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/items/{itemId}/memberships/requests/',
    ...options,
  });
};

/**
 * Create a membership request
 * Create a membership request for an item with the authenticated member.
 * The member should not have any permission on the item.
 * If there is an Item Login associated with the item, the request will be rejected.
 */
export const postItemsByItemIdMembershipsRequests = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostItemsByItemIdMembershipsRequestsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostItemsByItemIdMembershipsRequestsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/items/{itemId}/memberships/requests/',
    ...options,
  });
};

/**
 * Get the status of the membership request for the authenticated member
 * Get the status of the membership request for the authenticated member for an item by its ID
 */
export const getItemsByItemIdMembershipsRequestsOwn = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetItemsByItemIdMembershipsRequestsOwnData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemsByItemIdMembershipsRequestsOwnResponse,
    unknown,
    ThrowOnError
  >({
    url: '/items/{itemId}/memberships/requests/own',
    ...options,
  });
};

/**
 * Delete a membership request
 * Delete a membership request from a member id and an item id.
 */
export const deleteItemsByItemIdMembershipsRequestsByMemberId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DeleteItemsByItemIdMembershipsRequestsByMemberIdData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteItemsByItemIdMembershipsRequestsByMemberIdResponse,
    unknown,
    ThrowOnError
  >({
    url: '/items/{itemId}/memberships/requests/{memberId}',
    ...options,
  });
};

export const getItemMemberships = <ThrowOnError extends boolean = false>(
  options: Options<GetItemMembershipsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetItemMembershipsResponse,
    GetItemMembershipsError,
    ThrowOnError
  >({
    url: '/item-memberships/',
    ...options,
  });
};

/**
 * Create access to item for account
 * Create access to item for account, given permission
 */
export const createItemMembership = <ThrowOnError extends boolean = false>(
  options: Options<CreateItemMembershipData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateItemMembershipResponse,
    CreateItemMembershipError,
    ThrowOnError
  >({
    url: '/item-memberships/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Create access to item for many accounts
 * Create access to item for many account, given permissions
 */
export const createManyItemMemberships = <ThrowOnError extends boolean = false>(
  options: Options<CreateManyItemMembershipsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateManyItemMembershipsResponse,
    CreateManyItemMembershipsError,
    ThrowOnError
  >({
    url: '/item-memberships/{itemId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete access to item for account
 * Delete access to item for account
 */
export const deleteItemMembership = <ThrowOnError extends boolean = false>(
  options: Options<DeleteItemMembershipData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DeleteItemMembershipResponse,
    DeleteItemMembershipError,
    ThrowOnError
  >({
    url: '/item-memberships/{id}',
    ...options,
  });
};

/**
 * Update permission for item membership
 * Update permission for item membership
 */
export const updateItemMembership = <ThrowOnError extends boolean = false>(
  options: Options<UpdateItemMembershipData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).patch<
    UpdateItemMembershipResponse,
    UpdateItemMembershipError,
    ThrowOnError
  >({
    url: '/item-memberships/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get count for tags
 * Get how many times a tag is associated with items, filtered by string search. It can be filtered by category. Get maximum the 10 most used tags.
 */
export const getCountForTags = <ThrowOnError extends boolean = false>(
  options: Options<GetCountForTagsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCountForTagsResponse,
    GetCountForTagsError,
    ThrowOnError
  >({
    url: '/tags/',
    ...options,
  });
};

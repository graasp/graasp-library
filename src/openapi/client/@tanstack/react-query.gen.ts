// This file is auto-generated by @hey-api/openapi-ts
import type { Options } from '@hey-api/client-fetch';
import {
  type DefaultError,
  type InfiniteData,
  type UseMutationOptions,
  infiniteQueryOptions,
  queryOptions,
} from '@tanstack/react-query';

import { client as _heyApiClient } from '../client.gen';
import {
  authenticate,
  authenticateMobile,
  authenticateMobileToWeb,
  clearAllMentions,
  clearChatMessage,
  collectionSearch,
  copyManyItems,
  createApp,
  createAppAction,
  createAppData,
  createAppDataFile,
  createAppSetting,
  createAppSettingFile,
  createChatMessage,
  createChatbotCompletionPrompt,
  createDocument,
  createEtherpad,
  createFavorite,
  createFolder,
  createFolderWithThumbnail,
  createInvitation,
  createItem,
  createItemFlag,
  createItemLike,
  createItemMembership,
  createItemWithThumbnail,
  createLink,
  createManyItemMemberships,
  createOwnProfile,
  createShortLink,
  createTagForItem,
  createVisibility,
  deleteAlias,
  deleteAppData,
  deleteAppSetting,
  deleteChatMessage,
  deleteCurrentAccount,
  deleteFavorite,
  deleteGeolocation,
  deleteInvitation,
  deleteItemLike,
  deleteItemLoginSchema,
  deleteItemMembership,
  deleteItemsByIdThumbnails,
  deleteItemsByItemIdMembershipsRequestsByMemberId,
  deleteManyItems,
  deleteMembersMembersByIdDelete,
  deleteMention,
  deleteTagForItem,
  deleteVisibility,
  downloadAppDataFile,
  downloadAppSettingFile,
  downloadAvatar,
  downloadFile,
  downloadItemThumbnail,
  enroll,
  exportActions,
  exportMemberData,
  exportZip,
  generateAppToken,
  geolocationReverse,
  geolocationSearch,
  getAccessibleItems,
  getAggregateActions,
  getAppActionsForApp,
  getAppContext,
  getAppDataForApp,
  getAppList,
  getAppSettingsForApp,
  getChat,
  getChildren,
  getCollectionInformations,
  getCollectionsForMember,
  getCountForTags,
  getCurrentAccount,
  getDescendantItems,
  getEtherpadFromItem,
  getFacetsForName,
  getFlagTypes,
  getGeolocationByItem,
  getInvitationById,
  getInvitationForItem,
  getItem,
  getItemActions,
  getItemLoginSchema,
  getItemLoginSchemaType,
  getItemMemberships,
  getItemValidationGroup,
  getItemsByItemIdMembershipsRequests,
  getItemsByItemIdMembershipsRequestsOwn,
  getItemsCollectionsInformations,
  getItemsCollectionsSearchRebuild,
  getItemsH5pAssetsIntegrationHtml,
  getItemsInBox,
  getItemsOwn,
  getItemsPublicationByItemIdStatus,
  getItemsSharedWith,
  getLatestItemValidationGroup,
  getLikesForCurrentMember,
  getLikesForItem,
  getLinkMetadata,
  getLogout,
  getMAuthRefresh,
  getManyItems,
  getMemberProfile,
  getMembersActions,
  getMembersCurrentPasswordStatus,
  getMostLikedCollections,
  getMostRecentCollections,
  getOneMember,
  getOwnFavorite,
  getOwnMentions,
  getOwnMostUsedApps,
  getOwnProfile,
  getOwnRecycledItems,
  getParentItems,
  getShortLinkAvailability,
  getShortLinkRedirection,
  getShortLinksForItem,
  getStatus,
  getStorage,
  getStorageFiles,
  getTagsForItem,
  getWs,
  health,
  importH5P,
  importZip,
  inviteFromCsv,
  inviteFromCsvWithTemplate,
  login,
  loginMobile,
  loginOrRegisterAsGuest,
  loginWithPasswordMobile,
  moveManyItems,
  patchChangeEmail,
  patchChatMessage,
  patchMembersById,
  patchMention,
  patchPassword,
  patchPasswordReset,
  postAction,
  postChangeEmail,
  postItemsByIdThumbnails,
  postItemsByItemIdMembershipsRequests,
  postLoginPassword,
  postMembersAvatar,
  postPassword,
  postPasswordReset,
  publishItem,
  putGeolocation,
  recycleManyItems,
  register,
  registerMobile,
  reorderItem,
  restoreManyItems,
  sendInvitation,
  unpublishItem,
  updateApp,
  updateAppData,
  updateAppSetting,
  updateCurrentAccount,
  updateDocument,
  updateEtherpad,
  updateFolder,
  updateInvitation,
  updateItem,
  updateItemLoginSchema,
  updateItemMembership,
  updateLink,
  updateOwnProfile,
  updateShortLink,
  uploadFile,
  validateItem,
} from '../sdk.gen';
import type {
  AuthenticateData,
  AuthenticateMobileData,
  AuthenticateMobileError,
  AuthenticateMobileResponse,
  AuthenticateMobileToWebData,
  ClearAllMentionsData,
  ClearAllMentionsError,
  ClearAllMentionsResponse,
  ClearChatMessageData,
  ClearChatMessageError,
  ClearChatMessageResponse,
  CollectionSearchData,
  CollectionSearchError,
  CollectionSearchResponse,
  CopyManyItemsData,
  CopyManyItemsError,
  CopyManyItemsResponse,
  CreateAppActionData,
  CreateAppActionError,
  CreateAppActionResponse,
  CreateAppData,
  CreateAppDataData,
  CreateAppDataError,
  CreateAppDataFileData,
  CreateAppDataFileError,
  CreateAppDataFileResponse,
  CreateAppDataResponse,
  CreateAppError,
  CreateAppResponse,
  CreateAppSettingData,
  CreateAppSettingError,
  CreateAppSettingFileData,
  CreateAppSettingFileError,
  CreateAppSettingFileResponse,
  CreateAppSettingResponse,
  CreateChatMessageData,
  CreateChatMessageError,
  CreateChatMessageResponse,
  CreateChatbotCompletionPromptData,
  CreateChatbotCompletionPromptError,
  CreateChatbotCompletionPromptResponse,
  CreateDocumentData,
  CreateDocumentError,
  CreateDocumentResponse,
  CreateEtherpadData,
  CreateEtherpadError,
  CreateEtherpadResponse,
  CreateFavoriteData,
  CreateFavoriteError,
  CreateFavoriteResponse,
  CreateFolderData,
  CreateFolderError,
  CreateFolderResponse,
  CreateFolderWithThumbnailData,
  CreateFolderWithThumbnailError,
  CreateFolderWithThumbnailResponse,
  CreateInvitationData,
  CreateInvitationError,
  CreateInvitationResponse,
  CreateItemData,
  CreateItemError,
  CreateItemFlagData,
  CreateItemFlagError,
  CreateItemFlagResponse,
  CreateItemLikeData,
  CreateItemLikeError,
  CreateItemLikeResponse,
  CreateItemMembershipData,
  CreateItemMembershipError,
  CreateItemMembershipResponse,
  CreateItemResponse,
  CreateItemWithThumbnailData,
  CreateItemWithThumbnailError,
  CreateItemWithThumbnailResponse,
  CreateLinkData,
  CreateLinkError,
  CreateLinkResponse,
  CreateManyItemMembershipsData,
  CreateManyItemMembershipsError,
  CreateManyItemMembershipsResponse,
  CreateOwnProfileData,
  CreateOwnProfileError,
  CreateOwnProfileResponse,
  CreateShortLinkData,
  CreateShortLinkError,
  CreateShortLinkResponse,
  CreateTagForItemData,
  CreateTagForItemError,
  CreateTagForItemResponse,
  CreateVisibilityData,
  CreateVisibilityError,
  CreateVisibilityResponse,
  DeleteAliasData,
  DeleteAliasError,
  DeleteAliasResponse,
  DeleteAppDataData,
  DeleteAppDataError,
  DeleteAppDataResponse,
  DeleteAppSettingData,
  DeleteAppSettingError,
  DeleteAppSettingResponse,
  DeleteChatMessageData,
  DeleteChatMessageError,
  DeleteChatMessageResponse,
  DeleteCurrentAccountData,
  DeleteCurrentAccountError,
  DeleteCurrentAccountResponse,
  DeleteFavoriteData,
  DeleteFavoriteError,
  DeleteFavoriteResponse,
  DeleteGeolocationData,
  DeleteGeolocationError,
  DeleteGeolocationResponse,
  DeleteInvitationData,
  DeleteInvitationError,
  DeleteInvitationResponse,
  DeleteItemLikeData,
  DeleteItemLikeError,
  DeleteItemLikeResponse,
  DeleteItemLoginSchemaData,
  DeleteItemLoginSchemaError,
  DeleteItemLoginSchemaResponse,
  DeleteItemMembershipData,
  DeleteItemMembershipError,
  DeleteItemMembershipResponse,
  DeleteItemsByIdThumbnailsData,
  DeleteItemsByItemIdMembershipsRequestsByMemberIdData,
  DeleteItemsByItemIdMembershipsRequestsByMemberIdResponse,
  DeleteManyItemsData,
  DeleteManyItemsError,
  DeleteManyItemsResponse,
  DeleteMembersMembersByIdDeleteData,
  DeleteMentionData,
  DeleteMentionError,
  DeleteMentionResponse,
  DeleteTagForItemData,
  DeleteTagForItemError,
  DeleteTagForItemResponse,
  DeleteVisibilityData,
  DeleteVisibilityError,
  DeleteVisibilityResponse,
  DownloadAppDataFileData,
  DownloadAppSettingFileData,
  DownloadAvatarData,
  DownloadFileData,
  DownloadItemThumbnailData,
  EnrollData,
  EnrollResponse,
  ExportActionsData,
  ExportActionsError,
  ExportActionsResponse,
  ExportMemberDataData,
  ExportMemberDataError,
  ExportMemberDataResponse,
  ExportZipData,
  GenerateAppTokenData,
  GenerateAppTokenError,
  GenerateAppTokenResponse,
  GeolocationReverseData,
  GeolocationSearchData,
  GetAccessibleItemsData,
  GetAccessibleItemsError,
  GetAccessibleItemsResponse,
  GetAggregateActionsData,
  GetAppActionsForAppData,
  GetAppContextData,
  GetAppDataForAppData,
  GetAppListData,
  GetAppSettingsForAppData,
  GetChatData,
  GetChildrenData,
  GetCollectionInformationsData,
  GetCollectionsForMemberData,
  GetCountForTagsData,
  GetCurrentAccountData,
  GetDescendantItemsData,
  GetEtherpadFromItemData,
  GetFacetsForNameData,
  GetFacetsForNameError,
  GetFacetsForNameResponse,
  GetFlagTypesData,
  GetGeolocationByItemData,
  GetInvitationByIdData,
  GetInvitationForItemData,
  GetItemActionsData,
  GetItemData,
  GetItemLoginSchemaData,
  GetItemLoginSchemaTypeData,
  GetItemMembershipsData,
  GetItemValidationGroupData,
  GetItemsByItemIdMembershipsRequestsData,
  GetItemsByItemIdMembershipsRequestsOwnData,
  GetItemsCollectionsInformationsData,
  GetItemsCollectionsSearchRebuildData,
  GetItemsH5pAssetsIntegrationHtmlData,
  GetItemsInBoxData,
  GetItemsOwnData,
  GetItemsPublicationByItemIdStatusData,
  GetItemsSharedWithData,
  GetLatestItemValidationGroupData,
  GetLikesForCurrentMemberData,
  GetLikesForItemData,
  GetLinkMetadataData,
  GetLogoutData,
  GetMAuthRefreshData,
  GetManyItemsData,
  GetMemberProfileData,
  GetMembersActionsData,
  GetMembersCurrentPasswordStatusData,
  GetMostLikedCollectionsData,
  GetMostRecentCollectionsData,
  GetOneMemberData,
  GetOwnFavoriteData,
  GetOwnMentionsData,
  GetOwnMostUsedAppsData,
  GetOwnProfileData,
  GetOwnRecycledItemsData,
  GetOwnRecycledItemsError,
  GetOwnRecycledItemsResponse,
  GetParentItemsData,
  GetShortLinkAvailabilityData,
  GetShortLinkRedirectionData,
  GetShortLinksForItemData,
  GetStatusData,
  GetStorageData,
  GetStorageFilesData,
  GetStorageFilesError,
  GetStorageFilesResponse,
  GetTagsForItemData,
  GetWsData,
  HealthData,
  ImportH5pData,
  ImportH5pError,
  ImportH5pResponse,
  ImportZipData,
  ImportZipError,
  InviteFromCsvData,
  InviteFromCsvError,
  InviteFromCsvResponse,
  InviteFromCsvWithTemplateData,
  InviteFromCsvWithTemplateError,
  InviteFromCsvWithTemplateResponse,
  LoginData,
  LoginError,
  LoginMobileData,
  LoginMobileError,
  LoginMobileResponse,
  LoginOrRegisterAsGuestData,
  LoginOrRegisterAsGuestError,
  LoginOrRegisterAsGuestResponse,
  LoginResponse,
  LoginWithPasswordMobileData,
  LoginWithPasswordMobileError,
  LoginWithPasswordMobileResponse,
  MoveManyItemsData,
  MoveManyItemsError,
  MoveManyItemsResponse,
  PatchChangeEmailData,
  PatchChangeEmailError,
  PatchChangeEmailResponse,
  PatchChatMessageData,
  PatchChatMessageError,
  PatchChatMessageResponse,
  PatchMembersByIdData,
  PatchMembersByIdError,
  PatchMembersByIdResponse,
  PatchMentionData,
  PatchMentionError,
  PatchMentionResponse,
  PatchPasswordData,
  PatchPasswordError,
  PatchPasswordResetData,
  PatchPasswordResetError,
  PatchPasswordResetResponse,
  PatchPasswordResponse,
  PostActionData,
  PostActionError,
  PostActionResponse,
  PostChangeEmailData,
  PostChangeEmailError,
  PostChangeEmailResponse,
  PostItemsByIdThumbnailsData,
  PostItemsByItemIdMembershipsRequestsData,
  PostItemsByItemIdMembershipsRequestsResponse,
  PostLoginPasswordData,
  PostMembersAvatarData,
  PostMembersAvatarResponse,
  PostPasswordData,
  PostPasswordError,
  PostPasswordResetData,
  PostPasswordResetError,
  PostPasswordResetResponse,
  PostPasswordResponse,
  PublishItemData,
  PublishItemError,
  PublishItemResponse,
  PutGeolocationData,
  PutGeolocationError,
  PutGeolocationResponse,
  RecycleManyItemsData,
  RecycleManyItemsError,
  RecycleManyItemsResponse,
  RegisterData,
  RegisterError,
  RegisterMobileData,
  RegisterMobileError,
  RegisterMobileResponse,
  RegisterResponse,
  ReorderItemData,
  ReorderItemError,
  ReorderItemResponse,
  RestoreManyItemsData,
  RestoreManyItemsError,
  RestoreManyItemsResponse,
  SendInvitationData,
  SendInvitationError,
  SendInvitationResponse,
  UnpublishItemData,
  UnpublishItemError,
  UnpublishItemResponse,
  UpdateAppData,
  UpdateAppDataData,
  UpdateAppDataError,
  UpdateAppDataResponse,
  UpdateAppError,
  UpdateAppResponse,
  UpdateAppSettingData,
  UpdateAppSettingError,
  UpdateAppSettingResponse,
  UpdateCurrentAccountData,
  UpdateCurrentAccountError,
  UpdateCurrentAccountResponse,
  UpdateDocumentData,
  UpdateDocumentError,
  UpdateDocumentResponse,
  UpdateEtherpadData,
  UpdateEtherpadError,
  UpdateEtherpadResponse,
  UpdateFolderData,
  UpdateFolderError,
  UpdateFolderResponse,
  UpdateInvitationData,
  UpdateInvitationError,
  UpdateInvitationResponse,
  UpdateItemData,
  UpdateItemError,
  UpdateItemLoginSchemaData,
  UpdateItemLoginSchemaError,
  UpdateItemLoginSchemaResponse,
  UpdateItemMembershipData,
  UpdateItemMembershipError,
  UpdateItemMembershipResponse,
  UpdateItemResponse,
  UpdateLinkData,
  UpdateLinkError,
  UpdateLinkResponse,
  UpdateOwnProfileData,
  UpdateOwnProfileError,
  UpdateOwnProfileResponse,
  UpdateShortLinkData,
  UpdateShortLinkError,
  UpdateShortLinkResponse,
  UploadFileData,
  UploadFileError,
  UploadFileResponse,
  ValidateItemData,
  ValidateItemError,
  ValidateItemResponse,
} from '../types.gen';

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const healthQueryKey = (options?: Options<HealthData>) => [
  createQueryKey('health', options),
];

export const healthOptions = (options?: Options<HealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await health({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthQueryKey(options),
  });
};

export const getStatusQueryKey = (options?: Options<GetStatusData>) => [
  createQueryKey('getStatus', options),
];

export const getStatusOptions = (options?: Options<GetStatusData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getStatusQueryKey(options),
  });
};

export const registerQueryKey = (options: Options<RegisterData>) => [
  createQueryKey('register', options),
];

export const registerOptions = (options: Options<RegisterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await register({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerQueryKey(options),
  });
};

export const registerMutation = (options?: Partial<Options<RegisterData>>) => {
  const mutationOptions: UseMutationOptions<
    RegisterResponse,
    RegisterError,
    Options<RegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await register({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginQueryKey = (options: Options<LoginData>) => [
  createQueryKey('login', options),
];

export const loginOptions = (options: Options<LoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await login({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginQueryKey(options),
  });
};

export const loginMutation = (options?: Partial<Options<LoginData>>) => {
  const mutationOptions: UseMutationOptions<
    LoginResponse,
    LoginError,
    Options<LoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await login({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authenticateQueryKey = (options: Options<AuthenticateData>) => [
  createQueryKey('authenticate', options),
];

export const authenticateOptions = (options: Options<AuthenticateData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticateQueryKey(options),
  });
};

export const getLogoutQueryKey = (options?: Options<GetLogoutData>) => [
  createQueryKey('getLogout', options),
];

export const getLogoutOptions = (options?: Options<GetLogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLogoutQueryKey(options),
  });
};

export const postLoginPasswordQueryKey = (
  options: Options<PostLoginPasswordData>,
) => [createQueryKey('postLoginPassword', options)];

export const postLoginPasswordOptions = (
  options: Options<PostLoginPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postLoginPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postLoginPasswordQueryKey(options),
  });
};

export const postLoginPasswordMutation = (
  options?: Partial<Options<PostLoginPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostLoginPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postLoginPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const patchPasswordMutation = (
  options?: Partial<Options<PatchPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchPasswordResponse,
    PatchPasswordError,
    Options<PatchPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postPasswordQueryKey = (options: Options<PostPasswordData>) => [
  createQueryKey('postPassword', options),
];

export const postPasswordOptions = (options: Options<PostPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postPasswordQueryKey(options),
  });
};

export const postPasswordMutation = (
  options?: Partial<Options<PostPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostPasswordResponse,
    PostPasswordError,
    Options<PostPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const patchPasswordResetMutation = (
  options?: Partial<Options<PatchPasswordResetData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchPasswordResetResponse,
    PatchPasswordResetError,
    Options<PatchPasswordResetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchPasswordReset({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postPasswordResetQueryKey = (
  options: Options<PostPasswordResetData>,
) => [createQueryKey('postPasswordReset', options)];

export const postPasswordResetOptions = (
  options: Options<PostPasswordResetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postPasswordReset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postPasswordResetQueryKey(options),
  });
};

export const postPasswordResetMutation = (
  options?: Partial<Options<PostPasswordResetData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostPasswordResetResponse,
    PostPasswordResetError,
    Options<PostPasswordResetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postPasswordReset({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMembersCurrentPasswordStatusQueryKey = (
  options?: Options<GetMembersCurrentPasswordStatusData>,
) => [createQueryKey('getMembersCurrentPasswordStatus', options)];

export const getMembersCurrentPasswordStatusOptions = (
  options?: Options<GetMembersCurrentPasswordStatusData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMembersCurrentPasswordStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMembersCurrentPasswordStatusQueryKey(options),
  });
};

export const registerMobileQueryKey = (
  options: Options<RegisterMobileData>,
) => [createQueryKey('registerMobile', options)];

export const registerMobileOptions = (options: Options<RegisterMobileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await registerMobile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerMobileQueryKey(options),
  });
};

export const registerMobileMutation = (
  options?: Partial<Options<RegisterMobileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RegisterMobileResponse,
    RegisterMobileError,
    Options<RegisterMobileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await registerMobile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginMobileQueryKey = (options: Options<LoginMobileData>) => [
  createQueryKey('loginMobile', options),
];

export const loginMobileOptions = (options: Options<LoginMobileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginMobile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginMobileQueryKey(options),
  });
};

export const loginMobileMutation = (
  options?: Partial<Options<LoginMobileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginMobileResponse,
    LoginMobileError,
    Options<LoginMobileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginMobile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginWithPasswordMobileQueryKey = (
  options: Options<LoginWithPasswordMobileData>,
) => [createQueryKey('loginWithPasswordMobile', options)];

export const loginWithPasswordMobileOptions = (
  options: Options<LoginWithPasswordMobileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginWithPasswordMobile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginWithPasswordMobileQueryKey(options),
  });
};

export const loginWithPasswordMobileMutation = (
  options?: Partial<Options<LoginWithPasswordMobileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginWithPasswordMobileResponse,
    LoginWithPasswordMobileError,
    Options<LoginWithPasswordMobileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginWithPasswordMobile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authenticateMobileQueryKey = (
  options: Options<AuthenticateMobileData>,
) => [createQueryKey('authenticateMobile', options)];

export const authenticateMobileOptions = (
  options: Options<AuthenticateMobileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticateMobile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticateMobileQueryKey(options),
  });
};

export const authenticateMobileMutation = (
  options?: Partial<Options<AuthenticateMobileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AuthenticateMobileResponse,
    AuthenticateMobileError,
    Options<AuthenticateMobileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authenticateMobile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMAuthRefreshQueryKey = (
  options?: Options<GetMAuthRefreshData>,
) => [createQueryKey('getMAuthRefresh', options)];

export const getMAuthRefreshOptions = (
  options?: Options<GetMAuthRefreshData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMAuthRefresh({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMAuthRefreshQueryKey(options),
  });
};

export const authenticateMobileToWebQueryKey = (
  options: Options<AuthenticateMobileToWebData>,
) => [createQueryKey('authenticateMobileToWeb', options)];

export const authenticateMobileToWebOptions = (
  options: Options<AuthenticateMobileToWebData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticateMobileToWeb({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticateMobileToWebQueryKey(options),
  });
};

export const getWsQueryKey = (options?: Options<GetWsData>) => [
  createQueryKey('getWs', options),
];

export const getWsOptions = (options?: Options<GetWsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getWs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getWsQueryKey(options),
  });
};

export const getMembersActionsQueryKey = (
  options?: Options<GetMembersActionsData>,
) => [createQueryKey('getMembersActions', options)];

export const getMembersActionsOptions = (
  options?: Options<GetMembersActionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMembersActions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMembersActionsQueryKey(options),
  });
};

export const deleteMembersMembersByIdDeleteMutation = (
  options?: Partial<Options<DeleteMembersMembersByIdDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteMembersMembersByIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteMembersMembersByIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteCurrentAccountMutation = (
  options?: Partial<Options<DeleteCurrentAccountData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteCurrentAccountResponse,
    DeleteCurrentAccountError,
    Options<DeleteCurrentAccountData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCurrentAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCurrentAccountQueryKey = (
  options?: Options<GetCurrentAccountData>,
) => [createQueryKey('getCurrentAccount', options)];

export const getCurrentAccountOptions = (
  options?: Options<GetCurrentAccountData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCurrentAccount({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCurrentAccountQueryKey(options),
  });
};

export const updateCurrentAccountMutation = (
  options?: Partial<Options<UpdateCurrentAccountData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateCurrentAccountResponse,
    UpdateCurrentAccountError,
    Options<UpdateCurrentAccountData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateCurrentAccount({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getStorageQueryKey = (options?: Options<GetStorageData>) => [
  createQueryKey('getStorage', options),
];

export const getStorageOptions = (options?: Options<GetStorageData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getStorage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getStorageQueryKey(options),
  });
};

export const getStorageFilesQueryKey = (
  options: Options<GetStorageFilesData>,
) => [createQueryKey('getStorageFiles', options)];

export const getStorageFilesOptions = (
  options: Options<GetStorageFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getStorageFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getStorageFilesQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getStorageFilesInfiniteQueryKey = (
  options: Options<GetStorageFilesData>,
): QueryKey<Options<GetStorageFilesData>> => [
  createQueryKey('getStorageFiles', options, true),
];

export const getStorageFilesInfiniteOptions = (
  options: Options<GetStorageFilesData>,
) => {
  return infiniteQueryOptions<
    GetStorageFilesResponse,
    GetStorageFilesError,
    InfiniteData<GetStorageFilesResponse>,
    QueryKey<Options<GetStorageFilesData>>,
    | number
    | Pick<
        QueryKey<Options<GetStorageFilesData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetStorageFilesData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getStorageFiles({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getStorageFilesInfiniteQueryKey(options),
    },
  );
};

export const getOneMemberQueryKey = (options: Options<GetOneMemberData>) => [
  createQueryKey('getOneMember', options),
];

export const getOneMemberOptions = (options: Options<GetOneMemberData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOneMember({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getOneMemberQueryKey(options),
  });
};

export const patchMembersByIdMutation = (
  options?: Partial<Options<PatchMembersByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchMembersByIdResponse,
    PatchMembersByIdError,
    Options<PatchMembersByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchMembersById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const patchChangeEmailMutation = (
  options?: Partial<Options<PatchChangeEmailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchChangeEmailResponse,
    PatchChangeEmailError,
    Options<PatchChangeEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchChangeEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postChangeEmailQueryKey = (
  options: Options<PostChangeEmailData>,
) => [createQueryKey('postChangeEmail', options)];

export const postChangeEmailOptions = (
  options: Options<PostChangeEmailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postChangeEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postChangeEmailQueryKey(options),
  });
};

export const postChangeEmailMutation = (
  options?: Partial<Options<PostChangeEmailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostChangeEmailResponse,
    PostChangeEmailError,
    Options<PostChangeEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postChangeEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postMembersAvatarQueryKey = (
  options?: Options<PostMembersAvatarData>,
) => [createQueryKey('postMembersAvatar', options)];

export const postMembersAvatarOptions = (
  options?: Options<PostMembersAvatarData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postMembersAvatar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postMembersAvatarQueryKey(options),
  });
};

export const postMembersAvatarMutation = (
  options?: Partial<Options<PostMembersAvatarData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostMembersAvatarResponse,
    DefaultError,
    Options<PostMembersAvatarData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postMembersAvatar({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const downloadAvatarQueryKey = (
  options: Options<DownloadAvatarData>,
) => [createQueryKey('downloadAvatar', options)];

export const downloadAvatarOptions = (options: Options<DownloadAvatarData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadAvatar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadAvatarQueryKey(options),
  });
};

export const getOwnProfileQueryKey = (options?: Options<GetOwnProfileData>) => [
  createQueryKey('getOwnProfile', options),
];

export const getOwnProfileOptions = (options?: Options<GetOwnProfileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOwnProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getOwnProfileQueryKey(options),
  });
};

export const getMemberProfileQueryKey = (
  options: Options<GetMemberProfileData>,
) => [createQueryKey('getMemberProfile', options)];

export const getMemberProfileOptions = (
  options: Options<GetMemberProfileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMemberProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMemberProfileQueryKey(options),
  });
};

export const updateOwnProfileMutation = (
  options?: Partial<Options<UpdateOwnProfileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateOwnProfileResponse,
    UpdateOwnProfileError,
    Options<UpdateOwnProfileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateOwnProfile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createOwnProfileQueryKey = (
  options: Options<CreateOwnProfileData>,
) => [createQueryKey('createOwnProfile', options)];

export const createOwnProfileOptions = (
  options: Options<CreateOwnProfileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createOwnProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createOwnProfileQueryKey(options),
  });
};

export const createOwnProfileMutation = (
  options?: Partial<Options<CreateOwnProfileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateOwnProfileResponse,
    CreateOwnProfileError,
    Options<CreateOwnProfileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createOwnProfile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const exportMemberDataQueryKey = (
  options?: Options<ExportMemberDataData>,
) => [createQueryKey('exportMemberData', options)];

export const exportMemberDataOptions = (
  options?: Options<ExportMemberDataData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await exportMemberData({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: exportMemberDataQueryKey(options),
  });
};

export const exportMemberDataMutation = (
  options?: Partial<Options<ExportMemberDataData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ExportMemberDataResponse,
    ExportMemberDataError,
    Options<ExportMemberDataData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await exportMemberData({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAppListQueryKey = (options?: Options<GetAppListData>) => [
  createQueryKey('getAppList', options),
];

export const getAppListOptions = (options?: Options<GetAppListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppListQueryKey(options),
  });
};

export const getOwnMostUsedAppsQueryKey = (
  options?: Options<GetOwnMostUsedAppsData>,
) => [createQueryKey('getOwnMostUsedApps', options)];

export const getOwnMostUsedAppsOptions = (
  options?: Options<GetOwnMostUsedAppsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOwnMostUsedApps({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getOwnMostUsedAppsQueryKey(options),
  });
};

export const generateAppTokenQueryKey = (
  options: Options<GenerateAppTokenData>,
) => [createQueryKey('generateAppToken', options)];

export const generateAppTokenOptions = (
  options: Options<GenerateAppTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await generateAppToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: generateAppTokenQueryKey(options),
  });
};

export const generateAppTokenMutation = (
  options?: Partial<Options<GenerateAppTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    GenerateAppTokenResponse,
    GenerateAppTokenError,
    Options<GenerateAppTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await generateAppToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAppContextQueryKey = (options: Options<GetAppContextData>) => [
  createQueryKey('getAppContext', options),
];

export const getAppContextOptions = (options: Options<GetAppContextData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppContext({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppContextQueryKey(options),
  });
};

export const getAppDataForAppQueryKey = (
  options: Options<GetAppDataForAppData>,
) => [createQueryKey('getAppDataForApp', options)];

export const getAppDataForAppOptions = (
  options: Options<GetAppDataForAppData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppDataForApp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppDataForAppQueryKey(options),
  });
};

export const createAppDataQueryKey = (options: Options<CreateAppDataData>) => [
  createQueryKey('createAppData', options),
];

export const createAppDataOptions = (options: Options<CreateAppDataData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAppData({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createAppDataQueryKey(options),
  });
};

export const createAppDataMutation = (
  options?: Partial<Options<CreateAppDataData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateAppDataResponse,
    CreateAppDataError,
    Options<CreateAppDataData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAppData({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteAppDataMutation = (
  options?: Partial<Options<DeleteAppDataData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAppDataResponse,
    DeleteAppDataError,
    Options<DeleteAppDataData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAppData({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateAppDataMutation = (
  options?: Partial<Options<UpdateAppDataData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateAppDataResponse,
    UpdateAppDataError,
    Options<UpdateAppDataData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateAppData({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createAppDataFileQueryKey = (
  options?: Options<CreateAppDataFileData>,
) => [createQueryKey('createAppDataFile', options)];

export const createAppDataFileOptions = (
  options?: Options<CreateAppDataFileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAppDataFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createAppDataFileQueryKey(options),
  });
};

export const createAppDataFileMutation = (
  options?: Partial<Options<CreateAppDataFileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateAppDataFileResponse,
    CreateAppDataFileError,
    Options<CreateAppDataFileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAppDataFile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const downloadAppDataFileQueryKey = (
  options: Options<DownloadAppDataFileData>,
) => [createQueryKey('downloadAppDataFile', options)];

export const downloadAppDataFileOptions = (
  options: Options<DownloadAppDataFileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadAppDataFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadAppDataFileQueryKey(options),
  });
};

export const getAppActionsForAppQueryKey = (
  options: Options<GetAppActionsForAppData>,
) => [createQueryKey('getAppActionsForApp', options)];

export const getAppActionsForAppOptions = (
  options: Options<GetAppActionsForAppData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppActionsForApp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppActionsForAppQueryKey(options),
  });
};

export const createAppActionQueryKey = (
  options: Options<CreateAppActionData>,
) => [createQueryKey('createAppAction', options)];

export const createAppActionOptions = (
  options: Options<CreateAppActionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAppAction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createAppActionQueryKey(options),
  });
};

export const createAppActionMutation = (
  options?: Partial<Options<CreateAppActionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateAppActionResponse,
    CreateAppActionError,
    Options<CreateAppActionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAppAction({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAppSettingsForAppQueryKey = (
  options: Options<GetAppSettingsForAppData>,
) => [createQueryKey('getAppSettingsForApp', options)];

export const getAppSettingsForAppOptions = (
  options: Options<GetAppSettingsForAppData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppSettingsForApp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppSettingsForAppQueryKey(options),
  });
};

export const createAppSettingQueryKey = (
  options: Options<CreateAppSettingData>,
) => [createQueryKey('createAppSetting', options)];

export const createAppSettingOptions = (
  options: Options<CreateAppSettingData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAppSetting({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createAppSettingQueryKey(options),
  });
};

export const createAppSettingMutation = (
  options?: Partial<Options<CreateAppSettingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateAppSettingResponse,
    CreateAppSettingError,
    Options<CreateAppSettingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAppSetting({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteAppSettingMutation = (
  options?: Partial<Options<DeleteAppSettingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAppSettingResponse,
    DeleteAppSettingError,
    Options<DeleteAppSettingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAppSetting({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateAppSettingMutation = (
  options?: Partial<Options<UpdateAppSettingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateAppSettingResponse,
    UpdateAppSettingError,
    Options<UpdateAppSettingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateAppSetting({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createAppSettingFileQueryKey = (
  options?: Options<CreateAppSettingFileData>,
) => [createQueryKey('createAppSettingFile', options)];

export const createAppSettingFileOptions = (
  options?: Options<CreateAppSettingFileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAppSettingFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createAppSettingFileQueryKey(options),
  });
};

export const createAppSettingFileMutation = (
  options?: Partial<Options<CreateAppSettingFileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateAppSettingFileResponse,
    CreateAppSettingFileError,
    Options<CreateAppSettingFileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAppSettingFile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const downloadAppSettingFileQueryKey = (
  options: Options<DownloadAppSettingFileData>,
) => [createQueryKey('downloadAppSettingFile', options)];

export const downloadAppSettingFileOptions = (
  options: Options<DownloadAppSettingFileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadAppSettingFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadAppSettingFileQueryKey(options),
  });
};

export const createChatbotCompletionPromptQueryKey = (
  options: Options<CreateChatbotCompletionPromptData>,
) => [createQueryKey('createChatbotCompletionPrompt', options)];

export const createChatbotCompletionPromptOptions = (
  options: Options<CreateChatbotCompletionPromptData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createChatbotCompletionPrompt({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createChatbotCompletionPromptQueryKey(options),
  });
};

export const createChatbotCompletionPromptMutation = (
  options?: Partial<Options<CreateChatbotCompletionPromptData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateChatbotCompletionPromptResponse,
    CreateChatbotCompletionPromptError,
    Options<CreateChatbotCompletionPromptData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createChatbotCompletionPrompt({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemLoginSchemaTypeQueryKey = (
  options: Options<GetItemLoginSchemaTypeData>,
) => [createQueryKey('getItemLoginSchemaType', options)];

export const getItemLoginSchemaTypeOptions = (
  options: Options<GetItemLoginSchemaTypeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemLoginSchemaType({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemLoginSchemaTypeQueryKey(options),
  });
};

export const deleteItemLoginSchemaMutation = (
  options?: Partial<Options<DeleteItemLoginSchemaData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteItemLoginSchemaResponse,
    DeleteItemLoginSchemaError,
    Options<DeleteItemLoginSchemaData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteItemLoginSchema({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemLoginSchemaQueryKey = (
  options: Options<GetItemLoginSchemaData>,
) => [createQueryKey('getItemLoginSchema', options)];

export const getItemLoginSchemaOptions = (
  options: Options<GetItemLoginSchemaData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemLoginSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemLoginSchemaQueryKey(options),
  });
};

export const updateItemLoginSchemaMutation = (
  options?: Partial<Options<UpdateItemLoginSchemaData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateItemLoginSchemaResponse,
    UpdateItemLoginSchemaError,
    Options<UpdateItemLoginSchemaData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateItemLoginSchema({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginOrRegisterAsGuestQueryKey = (
  options: Options<LoginOrRegisterAsGuestData>,
) => [createQueryKey('loginOrRegisterAsGuest', options)];

export const loginOrRegisterAsGuestOptions = (
  options: Options<LoginOrRegisterAsGuestData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginOrRegisterAsGuest({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginOrRegisterAsGuestQueryKey(options),
  });
};

export const loginOrRegisterAsGuestMutation = (
  options?: Partial<Options<LoginOrRegisterAsGuestData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginOrRegisterAsGuestResponse,
    LoginOrRegisterAsGuestError,
    Options<LoginOrRegisterAsGuestData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginOrRegisterAsGuest({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getOwnFavoriteQueryKey = (
  options?: Options<GetOwnFavoriteData>,
) => [createQueryKey('getOwnFavorite', options)];

export const getOwnFavoriteOptions = (
  options?: Options<GetOwnFavoriteData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOwnFavorite({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getOwnFavoriteQueryKey(options),
  });
};

export const deleteFavoriteMutation = (
  options?: Partial<Options<DeleteFavoriteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteFavoriteResponse,
    DeleteFavoriteError,
    Options<DeleteFavoriteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteFavorite({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createFavoriteQueryKey = (
  options: Options<CreateFavoriteData>,
) => [createQueryKey('createFavorite', options)];

export const createFavoriteOptions = (options: Options<CreateFavoriteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createFavorite({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createFavoriteQueryKey(options),
  });
};

export const createFavoriteMutation = (
  options?: Partial<Options<CreateFavoriteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateFavoriteResponse,
    CreateFavoriteError,
    Options<CreateFavoriteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createFavorite({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCollectionsForMemberQueryKey = (
  options: Options<GetCollectionsForMemberData>,
) => [createQueryKey('getCollectionsForMember', options)];

export const getCollectionsForMemberOptions = (
  options: Options<GetCollectionsForMemberData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCollectionsForMember({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCollectionsForMemberQueryKey(options),
  });
};

export const getCollectionInformationsQueryKey = (
  options: Options<GetCollectionInformationsData>,
) => [createQueryKey('getCollectionInformations', options)];

export const getCollectionInformationsOptions = (
  options: Options<GetCollectionInformationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCollectionInformations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCollectionInformationsQueryKey(options),
  });
};

export const getItemsCollectionsInformationsQueryKey = (
  options: Options<GetItemsCollectionsInformationsData>,
) => [createQueryKey('getItemsCollectionsInformations', options)];

export const getItemsCollectionsInformationsOptions = (
  options: Options<GetItemsCollectionsInformationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsCollectionsInformations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsCollectionsInformationsQueryKey(options),
  });
};

export const publishItemQueryKey = (options: Options<PublishItemData>) => [
  createQueryKey('publishItem', options),
];

export const publishItemOptions = (options: Options<PublishItemData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await publishItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: publishItemQueryKey(options),
  });
};

export const publishItemMutation = (
  options?: Partial<Options<PublishItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PublishItemResponse,
    PublishItemError,
    Options<PublishItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await publishItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const unpublishItemMutation = (
  options?: Partial<Options<UnpublishItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UnpublishItemResponse,
    UnpublishItemError,
    Options<UnpublishItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await unpublishItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const collectionSearchQueryKey = (
  options?: Options<CollectionSearchData>,
) => [createQueryKey('collectionSearch', options)];

export const collectionSearchOptions = (
  options?: Options<CollectionSearchData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await collectionSearch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: collectionSearchQueryKey(options),
  });
};

export const collectionSearchInfiniteQueryKey = (
  options?: Options<CollectionSearchData>,
): QueryKey<Options<CollectionSearchData>> => [
  createQueryKey('collectionSearch', options, true),
];

export const collectionSearchInfiniteOptions = (
  options?: Options<CollectionSearchData>,
) => {
  return infiniteQueryOptions<
    CollectionSearchResponse,
    CollectionSearchError,
    InfiniteData<CollectionSearchResponse>,
    QueryKey<Options<CollectionSearchData>>,
    | number
    | Pick<
        QueryKey<Options<CollectionSearchData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<CollectionSearchData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                body: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await collectionSearch({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: collectionSearchInfiniteQueryKey(options),
    },
  );
};

export const collectionSearchMutation = (
  options?: Partial<Options<CollectionSearchData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CollectionSearchResponse,
    CollectionSearchError,
    Options<CollectionSearchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await collectionSearch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFacetsForNameQueryKey = (
  options: Options<GetFacetsForNameData>,
) => [createQueryKey('getFacetsForName', options)];

export const getFacetsForNameOptions = (
  options: Options<GetFacetsForNameData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFacetsForName({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFacetsForNameQueryKey(options),
  });
};

export const getFacetsForNameMutation = (
  options?: Partial<Options<GetFacetsForNameData>>,
) => {
  const mutationOptions: UseMutationOptions<
    GetFacetsForNameResponse,
    GetFacetsForNameError,
    Options<GetFacetsForNameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await getFacetsForName({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMostLikedCollectionsQueryKey = (
  options?: Options<GetMostLikedCollectionsData>,
) => [createQueryKey('getMostLikedCollections', options)];

export const getMostLikedCollectionsOptions = (
  options?: Options<GetMostLikedCollectionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMostLikedCollections({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMostLikedCollectionsQueryKey(options),
  });
};

export const getMostRecentCollectionsQueryKey = (
  options?: Options<GetMostRecentCollectionsData>,
) => [createQueryKey('getMostRecentCollections', options)];

export const getMostRecentCollectionsOptions = (
  options?: Options<GetMostRecentCollectionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMostRecentCollections({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMostRecentCollectionsQueryKey(options),
  });
};

export const getItemsCollectionsSearchRebuildQueryKey = (
  options?: Options<GetItemsCollectionsSearchRebuildData>,
) => [createQueryKey('getItemsCollectionsSearchRebuild', options)];

export const getItemsCollectionsSearchRebuildOptions = (
  options?: Options<GetItemsCollectionsSearchRebuildData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsCollectionsSearchRebuild({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsCollectionsSearchRebuildQueryKey(options),
  });
};

export const deleteItemsByIdThumbnailsMutation = (
  options?: Partial<Options<DeleteItemsByIdThumbnailsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteItemsByIdThumbnailsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteItemsByIdThumbnails({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postItemsByIdThumbnailsQueryKey = (
  options: Options<PostItemsByIdThumbnailsData>,
) => [createQueryKey('postItemsByIdThumbnails', options)];

export const postItemsByIdThumbnailsOptions = (
  options: Options<PostItemsByIdThumbnailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postItemsByIdThumbnails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postItemsByIdThumbnailsQueryKey(options),
  });
};

export const postItemsByIdThumbnailsMutation = (
  options?: Partial<Options<PostItemsByIdThumbnailsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostItemsByIdThumbnailsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postItemsByIdThumbnails({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const downloadItemThumbnailQueryKey = (
  options: Options<DownloadItemThumbnailData>,
) => [createQueryKey('downloadItemThumbnail', options)];

export const downloadItemThumbnailOptions = (
  options: Options<DownloadItemThumbnailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadItemThumbnail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadItemThumbnailQueryKey(options),
  });
};

export const uploadFileQueryKey = (options?: Options<UploadFileData>) => [
  createQueryKey('uploadFile', options),
];

export const uploadFileOptions = (options?: Options<UploadFileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await uploadFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: uploadFileQueryKey(options),
  });
};

export const uploadFileMutation = (
  options?: Partial<Options<UploadFileData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UploadFileResponse,
    UploadFileError,
    Options<UploadFileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await uploadFile({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const downloadFileQueryKey = (options: Options<DownloadFileData>) => [
  createQueryKey('downloadFile', options),
];

export const downloadFileOptions = (options: Options<DownloadFileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: downloadFileQueryKey(options),
  });
};

export const deleteVisibilityMutation = (
  options?: Partial<Options<DeleteVisibilityData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteVisibilityResponse,
    DeleteVisibilityError,
    Options<DeleteVisibilityData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteVisibility({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createVisibilityQueryKey = (
  options: Options<CreateVisibilityData>,
) => [createQueryKey('createVisibility', options)];

export const createVisibilityOptions = (
  options: Options<CreateVisibilityData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createVisibility({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createVisibilityQueryKey(options),
  });
};

export const createVisibilityMutation = (
  options?: Partial<Options<CreateVisibilityData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateVisibilityResponse,
    CreateVisibilityError,
    Options<CreateVisibilityData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createVisibility({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createFolderQueryKey = (options: Options<CreateFolderData>) => [
  createQueryKey('createFolder', options),
];

export const createFolderOptions = (options: Options<CreateFolderData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createFolder({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createFolderQueryKey(options),
  });
};

export const createFolderMutation = (
  options?: Partial<Options<CreateFolderData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateFolderResponse,
    CreateFolderError,
    Options<CreateFolderData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createFolder({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateFolderMutation = (
  options?: Partial<Options<UpdateFolderData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateFolderResponse,
    UpdateFolderError,
    Options<UpdateFolderData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateFolder({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createFolderWithThumbnailQueryKey = (
  options?: Options<CreateFolderWithThumbnailData>,
) => [createQueryKey('createFolderWithThumbnail', options)];

export const createFolderWithThumbnailOptions = (
  options?: Options<CreateFolderWithThumbnailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createFolderWithThumbnail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createFolderWithThumbnailQueryKey(options),
  });
};

export const createFolderWithThumbnailMutation = (
  options?: Partial<Options<CreateFolderWithThumbnailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateFolderWithThumbnailResponse,
    CreateFolderWithThumbnailError,
    Options<CreateFolderWithThumbnailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createFolderWithThumbnail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createAppQueryKey = (options: Options<CreateAppData>) => [
  createQueryKey('createApp', options),
];

export const createAppOptions = (options: Options<CreateAppData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createApp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createAppQueryKey(options),
  });
};

export const createAppMutation = (
  options?: Partial<Options<CreateAppData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateAppResponse,
    CreateAppError,
    Options<CreateAppData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createApp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateAppMutation = (
  options?: Partial<Options<UpdateAppData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateAppResponse,
    UpdateAppError,
    Options<UpdateAppData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateApp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteAliasMutation = (
  options?: Partial<Options<DeleteAliasData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAliasResponse,
    DeleteAliasError,
    Options<DeleteAliasData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAlias({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getShortLinkRedirectionQueryKey = (
  options: Options<GetShortLinkRedirectionData>,
) => [createQueryKey('getShortLinkRedirection', options)];

export const getShortLinkRedirectionOptions = (
  options: Options<GetShortLinkRedirectionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getShortLinkRedirection({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getShortLinkRedirectionQueryKey(options),
  });
};

export const updateShortLinkMutation = (
  options?: Partial<Options<UpdateShortLinkData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateShortLinkResponse,
    UpdateShortLinkError,
    Options<UpdateShortLinkData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateShortLink({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getShortLinkAvailabilityQueryKey = (
  options: Options<GetShortLinkAvailabilityData>,
) => [createQueryKey('getShortLinkAvailability', options)];

export const getShortLinkAvailabilityOptions = (
  options: Options<GetShortLinkAvailabilityData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getShortLinkAvailability({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getShortLinkAvailabilityQueryKey(options),
  });
};

export const getShortLinksForItemQueryKey = (
  options: Options<GetShortLinksForItemData>,
) => [createQueryKey('getShortLinksForItem', options)];

export const getShortLinksForItemOptions = (
  options: Options<GetShortLinksForItemData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getShortLinksForItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getShortLinksForItemQueryKey(options),
  });
};

export const createShortLinkQueryKey = (
  options: Options<CreateShortLinkData>,
) => [createQueryKey('createShortLink', options)];

export const createShortLinkOptions = (
  options: Options<CreateShortLinkData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createShortLink({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createShortLinkQueryKey(options),
  });
};

export const createShortLinkMutation = (
  options?: Partial<Options<CreateShortLinkData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateShortLinkResponse,
    CreateShortLinkError,
    Options<CreateShortLinkData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createShortLink({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemsPublicationByItemIdStatusQueryKey = (
  options: Options<GetItemsPublicationByItemIdStatusData>,
) => [createQueryKey('getItemsPublicationByItemIdStatus', options)];

export const getItemsPublicationByItemIdStatusOptions = (
  options: Options<GetItemsPublicationByItemIdStatusData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsPublicationByItemIdStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsPublicationByItemIdStatusQueryKey(options),
  });
};

export const getItemsH5pAssetsIntegrationHtmlQueryKey = (
  options?: Options<GetItemsH5pAssetsIntegrationHtmlData>,
) => [createQueryKey('getItemsH5pAssetsIntegrationHtml', options)];

export const getItemsH5pAssetsIntegrationHtmlOptions = (
  options?: Options<GetItemsH5pAssetsIntegrationHtmlData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsH5pAssetsIntegrationHtml({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsH5pAssetsIntegrationHtmlQueryKey(options),
  });
};

export const importH5PQueryKey = (options?: Options<ImportH5pData>) => [
  createQueryKey('importH5P', options),
];

export const importH5POptions = (options?: Options<ImportH5pData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await importH5P({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: importH5PQueryKey(options),
  });
};

export const importH5PMutation = (
  options?: Partial<Options<ImportH5pData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ImportH5pResponse,
    ImportH5pError,
    Options<ImportH5pData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await importH5P({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createEtherpadQueryKey = (
  options: Options<CreateEtherpadData>,
) => [createQueryKey('createEtherpad', options)];

export const createEtherpadOptions = (options: Options<CreateEtherpadData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createEtherpad({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createEtherpadQueryKey(options),
  });
};

export const createEtherpadMutation = (
  options?: Partial<Options<CreateEtherpadData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateEtherpadResponse,
    CreateEtherpadError,
    Options<CreateEtherpadData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createEtherpad({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateEtherpadMutation = (
  options?: Partial<Options<UpdateEtherpadData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateEtherpadResponse,
    UpdateEtherpadError,
    Options<UpdateEtherpadData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateEtherpad({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getEtherpadFromItemQueryKey = (
  options: Options<GetEtherpadFromItemData>,
) => [createQueryKey('getEtherpadFromItem', options)];

export const getEtherpadFromItemOptions = (
  options: Options<GetEtherpadFromItemData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getEtherpadFromItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getEtherpadFromItemQueryKey(options),
  });
};

export const importZipQueryKey = (options?: Options<ImportZipData>) => [
  createQueryKey('importZip', options),
];

export const importZipOptions = (options?: Options<ImportZipData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await importZip({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: importZipQueryKey(options),
  });
};

export const importZipMutation = (
  options?: Partial<Options<ImportZipData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ImportZipError,
    Options<ImportZipData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await importZip({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const exportZipQueryKey = (options: Options<ExportZipData>) => [
  createQueryKey('exportZip', options),
];

export const exportZipOptions = (options: Options<ExportZipData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await exportZip({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: exportZipQueryKey(options),
  });
};

export const getLinkMetadataQueryKey = (
  options: Options<GetLinkMetadataData>,
) => [createQueryKey('getLinkMetadata', options)];

export const getLinkMetadataOptions = (
  options: Options<GetLinkMetadataData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLinkMetadata({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLinkMetadataQueryKey(options),
  });
};

export const createLinkQueryKey = (options: Options<CreateLinkData>) => [
  createQueryKey('createLink', options),
];

export const createLinkOptions = (options: Options<CreateLinkData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createLink({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createLinkQueryKey(options),
  });
};

export const createLinkMutation = (
  options?: Partial<Options<CreateLinkData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateLinkResponse,
    CreateLinkError,
    Options<CreateLinkData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createLink({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateLinkMutation = (
  options?: Partial<Options<UpdateLinkData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateLinkResponse,
    UpdateLinkError,
    Options<UpdateLinkData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateLink({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createDocumentQueryKey = (
  options: Options<CreateDocumentData>,
) => [createQueryKey('createDocument', options)];

export const createDocumentOptions = (options: Options<CreateDocumentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createDocument({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createDocumentQueryKey(options),
  });
};

export const createDocumentMutation = (
  options?: Partial<Options<CreateDocumentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateDocumentResponse,
    CreateDocumentError,
    Options<CreateDocumentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createDocument({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateDocumentMutation = (
  options?: Partial<Options<UpdateDocumentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateDocumentResponse,
    UpdateDocumentError,
    Options<UpdateDocumentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateDocument({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getInvitationByIdQueryKey = (
  options: Options<GetInvitationByIdData>,
) => [createQueryKey('getInvitationById', options)];

export const getInvitationByIdOptions = (
  options: Options<GetInvitationByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getInvitationById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getInvitationByIdQueryKey(options),
  });
};

export const createInvitationQueryKey = (
  options: Options<CreateInvitationData>,
) => [createQueryKey('createInvitation', options)];

export const createInvitationOptions = (
  options: Options<CreateInvitationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createInvitation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createInvitationQueryKey(options),
  });
};

export const createInvitationMutation = (
  options?: Partial<Options<CreateInvitationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateInvitationResponse,
    CreateInvitationError,
    Options<CreateInvitationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createInvitation({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getInvitationForItemQueryKey = (
  options: Options<GetInvitationForItemData>,
) => [createQueryKey('getInvitationForItem', options)];

export const getInvitationForItemOptions = (
  options: Options<GetInvitationForItemData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getInvitationForItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getInvitationForItemQueryKey(options),
  });
};

export const deleteInvitationMutation = (
  options?: Partial<Options<DeleteInvitationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteInvitationResponse,
    DeleteInvitationError,
    Options<DeleteInvitationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteInvitation({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateInvitationMutation = (
  options?: Partial<Options<UpdateInvitationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateInvitationResponse,
    UpdateInvitationError,
    Options<UpdateInvitationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateInvitation({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const sendInvitationQueryKey = (
  options: Options<SendInvitationData>,
) => [createQueryKey('sendInvitation', options)];

export const sendInvitationOptions = (options: Options<SendInvitationData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sendInvitation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: sendInvitationQueryKey(options),
  });
};

export const sendInvitationMutation = (
  options?: Partial<Options<SendInvitationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SendInvitationResponse,
    SendInvitationError,
    Options<SendInvitationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await sendInvitation({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const inviteFromCsvWithTemplateQueryKey = (
  options: Options<InviteFromCsvWithTemplateData>,
) => [createQueryKey('inviteFromCsvWithTemplate', options)];

export const inviteFromCsvWithTemplateOptions = (
  options: Options<InviteFromCsvWithTemplateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await inviteFromCsvWithTemplate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: inviteFromCsvWithTemplateQueryKey(options),
  });
};

export const inviteFromCsvWithTemplateMutation = (
  options?: Partial<Options<InviteFromCsvWithTemplateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    InviteFromCsvWithTemplateResponse,
    InviteFromCsvWithTemplateError,
    Options<InviteFromCsvWithTemplateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await inviteFromCsvWithTemplate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const inviteFromCsvQueryKey = (options: Options<InviteFromCsvData>) => [
  createQueryKey('inviteFromCsv', options),
];

export const inviteFromCsvOptions = (options: Options<InviteFromCsvData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await inviteFromCsv({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: inviteFromCsvQueryKey(options),
  });
};

export const inviteFromCsvMutation = (
  options?: Partial<Options<InviteFromCsvData>>,
) => {
  const mutationOptions: UseMutationOptions<
    InviteFromCsvResponse,
    InviteFromCsvError,
    Options<InviteFromCsvData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await inviteFromCsv({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const enrollQueryKey = (options: Options<EnrollData>) => [
  createQueryKey('enroll', options),
];

export const enrollOptions = (options: Options<EnrollData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await enroll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: enrollQueryKey(options),
  });
};

export const enrollMutation = (options?: Partial<Options<EnrollData>>) => {
  const mutationOptions: UseMutationOptions<
    EnrollResponse,
    DefaultError,
    Options<EnrollData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await enroll({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFlagTypesQueryKey = (options?: Options<GetFlagTypesData>) => [
  createQueryKey('getFlagTypes', options),
];

export const getFlagTypesOptions = (options?: Options<GetFlagTypesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFlagTypes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFlagTypesQueryKey(options),
  });
};

export const createItemFlagQueryKey = (
  options: Options<CreateItemFlagData>,
) => [createQueryKey('createItemFlag', options)];

export const createItemFlagOptions = (options: Options<CreateItemFlagData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createItemFlag({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createItemFlagQueryKey(options),
  });
};

export const createItemFlagMutation = (
  options?: Partial<Options<CreateItemFlagData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateItemFlagResponse,
    CreateItemFlagError,
    Options<CreateItemFlagData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createItemFlag({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getOwnRecycledItemsQueryKey = (
  options: Options<GetOwnRecycledItemsData>,
) => [createQueryKey('getOwnRecycledItems', options)];

export const getOwnRecycledItemsOptions = (
  options: Options<GetOwnRecycledItemsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOwnRecycledItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getOwnRecycledItemsQueryKey(options),
  });
};

export const getOwnRecycledItemsInfiniteQueryKey = (
  options: Options<GetOwnRecycledItemsData>,
): QueryKey<Options<GetOwnRecycledItemsData>> => [
  createQueryKey('getOwnRecycledItems', options, true),
];

export const getOwnRecycledItemsInfiniteOptions = (
  options: Options<GetOwnRecycledItemsData>,
) => {
  return infiniteQueryOptions<
    GetOwnRecycledItemsResponse,
    GetOwnRecycledItemsError,
    InfiniteData<GetOwnRecycledItemsResponse>,
    QueryKey<Options<GetOwnRecycledItemsData>>,
    | number
    | Pick<
        QueryKey<Options<GetOwnRecycledItemsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetOwnRecycledItemsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getOwnRecycledItems({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getOwnRecycledItemsInfiniteQueryKey(options),
    },
  );
};

export const recycleManyItemsQueryKey = (
  options: Options<RecycleManyItemsData>,
) => [createQueryKey('recycleManyItems', options)];

export const recycleManyItemsOptions = (
  options: Options<RecycleManyItemsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await recycleManyItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: recycleManyItemsQueryKey(options),
  });
};

export const recycleManyItemsMutation = (
  options?: Partial<Options<RecycleManyItemsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RecycleManyItemsResponse,
    RecycleManyItemsError,
    Options<RecycleManyItemsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await recycleManyItems({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const restoreManyItemsQueryKey = (
  options: Options<RestoreManyItemsData>,
) => [createQueryKey('restoreManyItems', options)];

export const restoreManyItemsOptions = (
  options: Options<RestoreManyItemsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await restoreManyItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: restoreManyItemsQueryKey(options),
  });
};

export const restoreManyItemsMutation = (
  options?: Partial<Options<RestoreManyItemsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RestoreManyItemsResponse,
    RestoreManyItemsError,
    Options<RestoreManyItemsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await restoreManyItems({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLatestItemValidationGroupQueryKey = (
  options: Options<GetLatestItemValidationGroupData>,
) => [createQueryKey('getLatestItemValidationGroup', options)];

export const getLatestItemValidationGroupOptions = (
  options: Options<GetLatestItemValidationGroupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLatestItemValidationGroup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLatestItemValidationGroupQueryKey(options),
  });
};

export const getItemValidationGroupQueryKey = (
  options: Options<GetItemValidationGroupData>,
) => [createQueryKey('getItemValidationGroup', options)];

export const getItemValidationGroupOptions = (
  options: Options<GetItemValidationGroupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemValidationGroup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemValidationGroupQueryKey(options),
  });
};

export const validateItemQueryKey = (options: Options<ValidateItemData>) => [
  createQueryKey('validateItem', options),
];

export const validateItemOptions = (options: Options<ValidateItemData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await validateItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: validateItemQueryKey(options),
  });
};

export const validateItemMutation = (
  options?: Partial<Options<ValidateItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ValidateItemResponse,
    ValidateItemError,
    Options<ValidateItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await validateItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLikesForCurrentMemberQueryKey = (
  options?: Options<GetLikesForCurrentMemberData>,
) => [createQueryKey('getLikesForCurrentMember', options)];

export const getLikesForCurrentMemberOptions = (
  options?: Options<GetLikesForCurrentMemberData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLikesForCurrentMember({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLikesForCurrentMemberQueryKey(options),
  });
};

export const getLikesForItemQueryKey = (
  options: Options<GetLikesForItemData>,
) => [createQueryKey('getLikesForItem', options)];

export const getLikesForItemOptions = (
  options: Options<GetLikesForItemData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLikesForItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLikesForItemQueryKey(options),
  });
};

export const deleteItemLikeMutation = (
  options?: Partial<Options<DeleteItemLikeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteItemLikeResponse,
    DeleteItemLikeError,
    Options<DeleteItemLikeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteItemLike({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createItemLikeQueryKey = (
  options: Options<CreateItemLikeData>,
) => [createQueryKey('createItemLike', options)];

export const createItemLikeOptions = (options: Options<CreateItemLikeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createItemLike({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createItemLikeQueryKey(options),
  });
};

export const createItemLikeMutation = (
  options?: Partial<Options<CreateItemLikeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateItemLikeResponse,
    CreateItemLikeError,
    Options<CreateItemLikeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createItemLike({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const clearAllMentionsMutation = (
  options?: Partial<Options<ClearAllMentionsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ClearAllMentionsResponse,
    ClearAllMentionsError,
    Options<ClearAllMentionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await clearAllMentions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getOwnMentionsQueryKey = (
  options?: Options<GetOwnMentionsData>,
) => [createQueryKey('getOwnMentions', options)];

export const getOwnMentionsOptions = (
  options?: Options<GetOwnMentionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOwnMentions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getOwnMentionsQueryKey(options),
  });
};

export const deleteMentionMutation = (
  options?: Partial<Options<DeleteMentionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteMentionResponse,
    DeleteMentionError,
    Options<DeleteMentionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteMention({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const patchMentionMutation = (
  options?: Partial<Options<PatchMentionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchMentionResponse,
    PatchMentionError,
    Options<PatchMentionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchMention({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const clearChatMessageMutation = (
  options?: Partial<Options<ClearChatMessageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ClearChatMessageResponse,
    ClearChatMessageError,
    Options<ClearChatMessageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await clearChatMessage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getChatQueryKey = (options: Options<GetChatData>) => [
  createQueryKey('getChat', options),
];

export const getChatOptions = (options: Options<GetChatData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChat({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChatQueryKey(options),
  });
};

export const createChatMessageQueryKey = (
  options: Options<CreateChatMessageData>,
) => [createQueryKey('createChatMessage', options)];

export const createChatMessageOptions = (
  options: Options<CreateChatMessageData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createChatMessage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createChatMessageQueryKey(options),
  });
};

export const createChatMessageMutation = (
  options?: Partial<Options<CreateChatMessageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateChatMessageResponse,
    CreateChatMessageError,
    Options<CreateChatMessageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createChatMessage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteChatMessageMutation = (
  options?: Partial<Options<DeleteChatMessageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteChatMessageResponse,
    DeleteChatMessageError,
    Options<DeleteChatMessageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteChatMessage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const patchChatMessageMutation = (
  options?: Partial<Options<PatchChatMessageData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchChatMessageResponse,
    PatchChatMessageError,
    Options<PatchChatMessageData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchChatMessage({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemActionsQueryKey = (
  options: Options<GetItemActionsData>,
) => [createQueryKey('getItemActions', options)];

export const getItemActionsOptions = (options: Options<GetItemActionsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemActions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemActionsQueryKey(options),
  });
};

export const postActionQueryKey = (options: Options<PostActionData>) => [
  createQueryKey('postAction', options),
];

export const postActionOptions = (options: Options<PostActionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postActionQueryKey(options),
  });
};

export const postActionMutation = (
  options?: Partial<Options<PostActionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostActionResponse,
    PostActionError,
    Options<PostActionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAction({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAggregateActionsQueryKey = (
  options: Options<GetAggregateActionsData>,
) => [createQueryKey('getAggregateActions', options)];

export const getAggregateActionsOptions = (
  options: Options<GetAggregateActionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAggregateActions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAggregateActionsQueryKey(options),
  });
};

export const exportActionsQueryKey = (options: Options<ExportActionsData>) => [
  createQueryKey('exportActions', options),
];

export const exportActionsOptions = (options: Options<ExportActionsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await exportActions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: exportActionsQueryKey(options),
  });
};

export const exportActionsMutation = (
  options?: Partial<Options<ExportActionsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ExportActionsResponse,
    ExportActionsError,
    Options<ExportActionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await exportActions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteGeolocationMutation = (
  options?: Partial<Options<DeleteGeolocationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteGeolocationResponse,
    DeleteGeolocationError,
    Options<DeleteGeolocationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteGeolocation({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getGeolocationByItemQueryKey = (
  options: Options<GetGeolocationByItemData>,
) => [createQueryKey('getGeolocationByItem', options)];

export const getGeolocationByItemOptions = (
  options: Options<GetGeolocationByItemData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getGeolocationByItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getGeolocationByItemQueryKey(options),
  });
};

export const putGeolocationMutation = (
  options?: Partial<Options<PutGeolocationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PutGeolocationResponse,
    PutGeolocationError,
    Options<PutGeolocationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putGeolocation({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemsInBoxQueryKey = (options: Options<GetItemsInBoxData>) => [
  createQueryKey('getItemsInBox', options),
];

export const getItemsInBoxOptions = (options: Options<GetItemsInBoxData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsInBox({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsInBoxQueryKey(options),
  });
};

export const geolocationReverseQueryKey = (
  options: Options<GeolocationReverseData>,
) => [createQueryKey('geolocationReverse', options)];

export const geolocationReverseOptions = (
  options: Options<GeolocationReverseData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await geolocationReverse({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: geolocationReverseQueryKey(options),
  });
};

export const geolocationSearchQueryKey = (
  options: Options<GeolocationSearchData>,
) => [createQueryKey('geolocationSearch', options)];

export const geolocationSearchOptions = (
  options: Options<GeolocationSearchData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await geolocationSearch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: geolocationSearchQueryKey(options),
  });
};

export const getTagsForItemQueryKey = (
  options: Options<GetTagsForItemData>,
) => [createQueryKey('getTagsForItem', options)];

export const getTagsForItemOptions = (options: Options<GetTagsForItemData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTagsForItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTagsForItemQueryKey(options),
  });
};

export const createTagForItemQueryKey = (
  options: Options<CreateTagForItemData>,
) => [createQueryKey('createTagForItem', options)];

export const createTagForItemOptions = (
  options: Options<CreateTagForItemData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createTagForItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createTagForItemQueryKey(options),
  });
};

export const createTagForItemMutation = (
  options?: Partial<Options<CreateTagForItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateTagForItemResponse,
    CreateTagForItemError,
    Options<CreateTagForItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createTagForItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteTagForItemMutation = (
  options?: Partial<Options<DeleteTagForItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteTagForItemResponse,
    DeleteTagForItemError,
    Options<DeleteTagForItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteTagForItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteManyItemsMutation = (
  options?: Partial<Options<DeleteManyItemsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteManyItemsResponse,
    DeleteManyItemsError,
    Options<DeleteManyItemsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteManyItems({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getManyItemsQueryKey = (options: Options<GetManyItemsData>) => [
  createQueryKey('getManyItems', options),
];

export const getManyItemsOptions = (options: Options<GetManyItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getManyItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getManyItemsQueryKey(options),
  });
};

export const createItemQueryKey = (options?: Options<CreateItemData>) => [
  createQueryKey('createItem', options),
];

export const createItemOptions = (options?: Options<CreateItemData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createItemQueryKey(options),
  });
};

export const createItemMutation = (
  options?: Partial<Options<CreateItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateItemResponse,
    CreateItemError,
    Options<CreateItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemQueryKey = (options: Options<GetItemData>) => [
  createQueryKey('getItem', options),
];

export const getItemOptions = (options: Options<GetItemData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemQueryKey(options),
  });
};

export const updateItemMutation = (
  options?: Partial<Options<UpdateItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateItemResponse,
    UpdateItemError,
    Options<UpdateItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAccessibleItemsQueryKey = (
  options: Options<GetAccessibleItemsData>,
) => [createQueryKey('getAccessibleItems', options)];

export const getAccessibleItemsOptions = (
  options: Options<GetAccessibleItemsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccessibleItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAccessibleItemsQueryKey(options),
  });
};

export const getAccessibleItemsInfiniteQueryKey = (
  options: Options<GetAccessibleItemsData>,
): QueryKey<Options<GetAccessibleItemsData>> => [
  createQueryKey('getAccessibleItems', options, true),
];

export const getAccessibleItemsInfiniteOptions = (
  options: Options<GetAccessibleItemsData>,
) => {
  return infiniteQueryOptions<
    GetAccessibleItemsResponse,
    GetAccessibleItemsError,
    InfiniteData<GetAccessibleItemsResponse>,
    QueryKey<Options<GetAccessibleItemsData>>,
    | number
    | Pick<
        QueryKey<Options<GetAccessibleItemsData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetAccessibleItemsData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getAccessibleItems({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getAccessibleItemsInfiniteQueryKey(options),
    },
  );
};

export const getItemsOwnQueryKey = (options?: Options<GetItemsOwnData>) => [
  createQueryKey('getItemsOwn', options),
];

export const getItemsOwnOptions = (options?: Options<GetItemsOwnData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsOwn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsOwnQueryKey(options),
  });
};

export const getItemsSharedWithQueryKey = (
  options?: Options<GetItemsSharedWithData>,
) => [createQueryKey('getItemsSharedWith', options)];

export const getItemsSharedWithOptions = (
  options?: Options<GetItemsSharedWithData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsSharedWith({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsSharedWithQueryKey(options),
  });
};

export const getChildrenQueryKey = (options: Options<GetChildrenData>) => [
  createQueryKey('getChildren', options),
];

export const getChildrenOptions = (options: Options<GetChildrenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChildren({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChildrenQueryKey(options),
  });
};

export const getDescendantItemsQueryKey = (
  options: Options<GetDescendantItemsData>,
) => [createQueryKey('getDescendantItems', options)];

export const getDescendantItemsOptions = (
  options: Options<GetDescendantItemsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDescendantItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDescendantItemsQueryKey(options),
  });
};

export const getParentItemsQueryKey = (
  options: Options<GetParentItemsData>,
) => [createQueryKey('getParentItems', options)];

export const getParentItemsOptions = (options: Options<GetParentItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getParentItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getParentItemsQueryKey(options),
  });
};

export const reorderItemMutation = (
  options?: Partial<Options<ReorderItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ReorderItemResponse,
    ReorderItemError,
    Options<ReorderItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await reorderItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const moveManyItemsQueryKey = (options: Options<MoveManyItemsData>) => [
  createQueryKey('moveManyItems', options),
];

export const moveManyItemsOptions = (options: Options<MoveManyItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await moveManyItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: moveManyItemsQueryKey(options),
  });
};

export const moveManyItemsMutation = (
  options?: Partial<Options<MoveManyItemsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    MoveManyItemsResponse,
    MoveManyItemsError,
    Options<MoveManyItemsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await moveManyItems({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const copyManyItemsQueryKey = (options: Options<CopyManyItemsData>) => [
  createQueryKey('copyManyItems', options),
];

export const copyManyItemsOptions = (options: Options<CopyManyItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await copyManyItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: copyManyItemsQueryKey(options),
  });
};

export const copyManyItemsMutation = (
  options?: Partial<Options<CopyManyItemsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CopyManyItemsResponse,
    CopyManyItemsError,
    Options<CopyManyItemsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await copyManyItems({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createItemWithThumbnailQueryKey = (
  options?: Options<CreateItemWithThumbnailData>,
) => [createQueryKey('createItemWithThumbnail', options)];

export const createItemWithThumbnailOptions = (
  options?: Options<CreateItemWithThumbnailData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createItemWithThumbnail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createItemWithThumbnailQueryKey(options),
  });
};

export const createItemWithThumbnailMutation = (
  options?: Partial<Options<CreateItemWithThumbnailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateItemWithThumbnailResponse,
    CreateItemWithThumbnailError,
    Options<CreateItemWithThumbnailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createItemWithThumbnail({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemsByItemIdMembershipsRequestsQueryKey = (
  options: Options<GetItemsByItemIdMembershipsRequestsData>,
) => [createQueryKey('getItemsByItemIdMembershipsRequests', options)];

export const getItemsByItemIdMembershipsRequestsOptions = (
  options: Options<GetItemsByItemIdMembershipsRequestsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsByItemIdMembershipsRequests({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsByItemIdMembershipsRequestsQueryKey(options),
  });
};

export const postItemsByItemIdMembershipsRequestsQueryKey = (
  options: Options<PostItemsByItemIdMembershipsRequestsData>,
) => [createQueryKey('postItemsByItemIdMembershipsRequests', options)];

export const postItemsByItemIdMembershipsRequestsOptions = (
  options: Options<PostItemsByItemIdMembershipsRequestsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postItemsByItemIdMembershipsRequests({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postItemsByItemIdMembershipsRequestsQueryKey(options),
  });
};

export const postItemsByItemIdMembershipsRequestsMutation = (
  options?: Partial<Options<PostItemsByItemIdMembershipsRequestsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostItemsByItemIdMembershipsRequestsResponse,
    DefaultError,
    Options<PostItemsByItemIdMembershipsRequestsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postItemsByItemIdMembershipsRequests({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemsByItemIdMembershipsRequestsOwnQueryKey = (
  options: Options<GetItemsByItemIdMembershipsRequestsOwnData>,
) => [createQueryKey('getItemsByItemIdMembershipsRequestsOwn', options)];

export const getItemsByItemIdMembershipsRequestsOwnOptions = (
  options: Options<GetItemsByItemIdMembershipsRequestsOwnData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemsByItemIdMembershipsRequestsOwn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemsByItemIdMembershipsRequestsOwnQueryKey(options),
  });
};

export const deleteItemsByItemIdMembershipsRequestsByMemberIdMutation = (
  options?: Partial<
    Options<DeleteItemsByItemIdMembershipsRequestsByMemberIdData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteItemsByItemIdMembershipsRequestsByMemberIdResponse,
    DefaultError,
    Options<DeleteItemsByItemIdMembershipsRequestsByMemberIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteItemsByItemIdMembershipsRequestsByMemberId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getItemMembershipsQueryKey = (
  options: Options<GetItemMembershipsData>,
) => [createQueryKey('getItemMemberships', options)];

export const getItemMembershipsOptions = (
  options: Options<GetItemMembershipsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getItemMemberships({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getItemMembershipsQueryKey(options),
  });
};

export const createItemMembershipQueryKey = (
  options: Options<CreateItemMembershipData>,
) => [createQueryKey('createItemMembership', options)];

export const createItemMembershipOptions = (
  options: Options<CreateItemMembershipData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createItemMembership({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createItemMembershipQueryKey(options),
  });
};

export const createItemMembershipMutation = (
  options?: Partial<Options<CreateItemMembershipData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateItemMembershipResponse,
    CreateItemMembershipError,
    Options<CreateItemMembershipData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createItemMembership({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createManyItemMembershipsQueryKey = (
  options: Options<CreateManyItemMembershipsData>,
) => [createQueryKey('createManyItemMemberships', options)];

export const createManyItemMembershipsOptions = (
  options: Options<CreateManyItemMembershipsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createManyItemMemberships({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createManyItemMembershipsQueryKey(options),
  });
};

export const createManyItemMembershipsMutation = (
  options?: Partial<Options<CreateManyItemMembershipsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateManyItemMembershipsResponse,
    CreateManyItemMembershipsError,
    Options<CreateManyItemMembershipsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createManyItemMemberships({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteItemMembershipMutation = (
  options?: Partial<Options<DeleteItemMembershipData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteItemMembershipResponse,
    DeleteItemMembershipError,
    Options<DeleteItemMembershipData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteItemMembership({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const updateItemMembershipMutation = (
  options?: Partial<Options<UpdateItemMembershipData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateItemMembershipResponse,
    UpdateItemMembershipError,
    Options<UpdateItemMembershipData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateItemMembership({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCountForTagsQueryKey = (
  options: Options<GetCountForTagsData>,
) => [createQueryKey('getCountForTags', options)];

export const getCountForTagsOptions = (
  options: Options<GetCountForTagsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCountForTags({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCountForTagsQueryKey(options),
  });
};

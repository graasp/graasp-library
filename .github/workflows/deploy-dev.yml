name: Deploy to development environment

on:
  push:
    branches:
      - main

  # Allows to run the workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: environment
        required: true
      version:
        description: "Version to deploy"
        type: "string"
        required: true

permissions:
  id-token: write # This is required for requesting the JWT to auth via OIDC
  contents: read # This is required for actions/checkout

concurrency:
  group: deploy-${{ inputs.environment }}
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment || 'dev' }}
    environment: ${{ inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version || 'main' }}

      # auth to aws
      - name: Configure AWS Credentials to assume deployment Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub_Action_deploy_library
          aws-region: ${{ vars.AWS_REGION }}

      # auth docker to ECR registry
      - name: Auth Docker to AWS ECR
        run: bash ./docker/auth.sh ${{ vars.AWS_ECR_URI }} ${{ vars.AWS_REGION }}
        shell: bash

      - name: Build image
        run: |
          docker build \
          -t ${{ vars.AWS_ECR_URI }}:latest \
          -f Dockerfile \
          --platform linux/amd64 \
          --build-arg APP_VERSION=${{ inputs.version || 'main' }} \
          --build-arg BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%S) \
          --build-arg VITE_API_HOST=${{ vars.VITE_API_HOST }} \
          --build-arg VITE_CLIENT_HOST=${{ vars.VITE_CLIENT_HOST }} \
          --build-arg VITE_GRAASPER_ID=${{ vars.VITE_GRAASPER_ID }} \
          .
        shell: bash

      # push image to ECR
      - name: Push image
        run: docker push ${{ vars.AWS_ECR_URI }}:latest

      # trigger service re-deployment
      - name: Force new deployment of library service
        run: |
          aws ecs update-service --cluster graasp-${{ inputs.environment || 'dev' }} --service graasp-library --force-new-deployment
